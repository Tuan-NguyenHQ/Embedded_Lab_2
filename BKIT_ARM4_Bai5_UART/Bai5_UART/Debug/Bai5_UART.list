
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030e4  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac34  0800ac34  000203f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac3c  0800ac3c  000203f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac40  0800ac40  0001ac40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f0  20000000  0800ac44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203f0  2**0
                  CONTENTS
 10 .bss          000003cc  200003f0  200003f0  000203f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007bc  200007bc  000203f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7ae  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf2  00000000  00000000  0003cbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  000408c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d0  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024619  00000000  00000000  000431f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3e6  00000000  00000000  00067809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36b1  00000000  00000000  00083bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001572a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c24  00000000  00000000  001572f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f0 	.word	0x200003f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b38 	.word	0x08007b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003f4 	.word	0x200003f4
 80001cc:	08007b38 	.word	0x08007b38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2108      	movs	r1, #8
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <button_init+0x14>)
 8000582:	f002 ff25 	bl	80033d0 <HAL_GPIO_WritePin>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40020c00 	.word	0x40020c00

08000590 <button_Scan>:

void button_Scan(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <button_Scan+0xc8>)
 800059c:	f002 ff18 	bl	80033d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2108      	movs	r1, #8
 80005a4:	482c      	ldr	r0, [pc, #176]	; (8000658 <button_Scan+0xc8>)
 80005a6:	f002 ff13 	bl	80033d0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80005aa:	230a      	movs	r3, #10
 80005ac:	2202      	movs	r2, #2
 80005ae:	492b      	ldr	r1, [pc, #172]	; (800065c <button_Scan+0xcc>)
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <button_Scan+0xd0>)
 80005b2:	f004 fd20 	bl	8004ff6 <HAL_SPI_Receive>
	  int button_index = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005be:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e03f      	b.n	8000646 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db06      	blt.n	80005da <button_Scan+0x4a>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	dc03      	bgt.n	80005da <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e018      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	dd07      	ble.n	80005f0 <button_Scan+0x60>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dc04      	bgt.n	80005f0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f1c3 0307 	rsb	r3, r3, #7
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e00d      	b.n	800060c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	dd06      	ble.n	8000604 <button_Scan+0x74>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0b      	cmp	r3, #11
 80005fa:	dc03      	bgt.n	8000604 <button_Scan+0x74>
			  button_index = i + 4;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	e003      	b.n	800060c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f1c3 0317 	rsb	r3, r3, #23
 800060a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <button_Scan+0xcc>)
 800060e:	881a      	ldrh	r2, [r3, #0]
 8000610:	897b      	ldrh	r3, [r7, #10]
 8000612:	4013      	ands	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <button_Scan+0x96>
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2100      	movs	r1, #0
 8000620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000624:	e009      	b.n	800063a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800062e:	3301      	adds	r3, #1
 8000630:	b299      	uxth	r1, r3
 8000632:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <button_Scan+0xd4>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800063a:	897b      	ldrh	r3, [r7, #10]
 800063c:	085b      	lsrs	r3, r3, #1
 800063e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	ddbc      	ble.n	80005c6 <button_Scan+0x36>
	  }
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40020c00 	.word	0x40020c00
 800065c:	2000040c 	.word	0x2000040c
 8000660:	20000640 	.word	0x20000640
 8000664:	200004ac 	.word	0x200004ac

08000668 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af04      	add	r7, sp, #16
 800066e:	4603      	mov	r3, r0
 8000670:	460a      	mov	r2, r1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	4613      	mov	r3, r2
 8000676:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	4618      	mov	r0, r3
 800067c:	f002 fa84 	bl	8002b88 <DEC2BCD>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	b29a      	uxth	r2, r3
 8000688:	230a      	movs	r3, #10
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	2301      	movs	r3, #1
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	f107 030f 	add.w	r3, r7, #15
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	21d0      	movs	r1, #208	; 0xd0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <ds3231_Write+0x40>)
 800069c:	f002 fff6 	bl	800368c <HAL_I2C_Mem_Write>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000052c 	.word	0x2000052c

080006ac <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80006b2:	230a      	movs	r3, #10
 80006b4:	9302      	str	r3, [sp, #8]
 80006b6:	2307      	movs	r3, #7
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	2200      	movs	r2, #0
 80006c2:	21d0      	movs	r1, #208	; 0xd0
 80006c4:	4823      	ldr	r0, [pc, #140]	; (8000754 <ds3231_ReadTime+0xa8>)
 80006c6:	f003 f8db 	bl	8003880 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fa40 	bl	8002b54 <BCD2DEC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <ds3231_ReadTime+0xac>)
 80006da:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fa37 	bl	8002b54 <BCD2DEC>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <ds3231_ReadTime+0xb0>)
 80006ec:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <ds3231_ReadTime+0xa4>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fa2e 	bl	8002b54 <BCD2DEC>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <ds3231_ReadTime+0xb4>)
 80006fe:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fa25 	bl	8002b54 <BCD2DEC>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <ds3231_ReadTime+0xb8>)
 8000710:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fa1c 	bl	8002b54 <BCD2DEC>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <ds3231_ReadTime+0xbc>)
 8000722:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fa13 	bl	8002b54 <BCD2DEC>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <ds3231_ReadTime+0xc0>)
 8000734:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <ds3231_ReadTime+0xa4>)
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fa0a 	bl	8002b54 <BCD2DEC>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <ds3231_ReadTime+0xc4>)
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200004d4 	.word	0x200004d4
 8000754:	2000052c 	.word	0x2000052c
 8000758:	200004cc 	.word	0x200004cc
 800075c:	200004ce 	.word	0x200004ce
 8000760:	200004d1 	.word	0x200004d1
 8000764:	200004d0 	.word	0x200004d0
 8000768:	200004cf 	.word	0x200004cf
 800076c:	200004d2 	.word	0x200004d2
 8000770:	200004cd 	.word	0x200004cd

08000774 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_FSMC_Init+0xec>)
 80007a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80007a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_FSMC_Init+0xec>)
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <MX_FSMC_Init+0xf0>)
 80007ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80007ae:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_FSMC_Init+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_FSMC_Init+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_FSMC_Init+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_FSMC_Init+0xec>)
 80007c2:	2210      	movs	r2, #16
 80007c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_FSMC_Init+0xec>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_FSMC_Init+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_FSMC_Init+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_FSMC_Init+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_FSMC_Init+0xec>)
 80007e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_FSMC_Init+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_FSMC_Init+0xec>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_FSMC_Init+0xec>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_FSMC_Init+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_FSMC_Init+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000806:	230f      	movs	r3, #15
 8000808:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800080a:	230f      	movs	r3, #15
 800080c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800080e:	233c      	movs	r3, #60	; 0x3c
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800081a:	2311      	movs	r3, #17
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800081e:	2300      	movs	r3, #0
 8000820:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000822:	2308      	movs	r3, #8
 8000824:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000826:	230f      	movs	r3, #15
 8000828:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800082a:	2309      	movs	r3, #9
 800082c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000832:	2310      	movs	r3, #16
 8000834:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000836:	2311      	movs	r3, #17
 8000838:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800083e:	463a      	mov	r2, r7
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_FSMC_Init+0xec>)
 8000848:	f004 ffb8 	bl	80057bc <HAL_SRAM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000852:	f001 fe87 	bl	8002564 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200004dc 	.word	0x200004dc
 8000864:	a0000104 	.word	0xa0000104

08000868 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_FSMC_MspInit+0x88>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d131      	bne.n	80008e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <HAL_FSMC_MspInit+0x88>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_FSMC_MspInit+0x8c>)
 8000890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_FSMC_MspInit+0x8c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6393      	str	r3, [r2, #56]	; 0x38
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_FSMC_MspInit+0x8c>)
 800089c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80008a6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80008aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <HAL_FSMC_MspInit+0x90>)
 80008c2:	f002 fbe9 	bl	8003098 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008c6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008d8:	230c      	movs	r3, #12
 80008da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <HAL_FSMC_MspInit+0x94>)
 80008e2:	f002 fbd9 	bl	8003098 <HAL_GPIO_Init>
 80008e6:	e000      	b.n	80008ea <HAL_FSMC_MspInit+0x82>
    return;
 80008e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000410 	.word	0x20000410
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40020c00 	.word	0x40020c00

08000900 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000908:	f7ff ffae 	bl	8000868 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b6f      	ldr	r3, [pc, #444]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a6e      	ldr	r2, [pc, #440]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b6c      	ldr	r3, [pc, #432]	; (8000aec <MX_GPIO_Init+0x1d8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b68      	ldr	r3, [pc, #416]	; (8000aec <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a67      	ldr	r2, [pc, #412]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b65      	ldr	r3, [pc, #404]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b61      	ldr	r3, [pc, #388]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a60      	ldr	r2, [pc, #384]	; (8000aec <MX_GPIO_Init+0x1d8>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b5a      	ldr	r3, [pc, #360]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a59      	ldr	r2, [pc, #356]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b57      	ldr	r3, [pc, #348]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a52      	ldr	r2, [pc, #328]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b50      	ldr	r3, [pc, #320]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b4c      	ldr	r3, [pc, #304]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b49      	ldr	r3, [pc, #292]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_GPIO_Init+0x1d8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2170      	movs	r1, #112	; 0x70
 80009f2:	483f      	ldr	r0, [pc, #252]	; (8000af0 <MX_GPIO_Init+0x1dc>)
 80009f4:	f002 fcec 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	483d      	ldr	r0, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a00:	f002 fce6 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	483b      	ldr	r0, [pc, #236]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000a0a:	f002 fce1 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <MX_GPIO_Init+0x1e8>)
 8000a16:	f002 fcdb 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4838      	ldr	r0, [pc, #224]	; (8000b00 <MX_GPIO_Init+0x1ec>)
 8000a20:	f002 fcd6 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a24:	2370      	movs	r3, #112	; 0x70
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	482d      	ldr	r0, [pc, #180]	; (8000af0 <MX_GPIO_Init+0x1dc>)
 8000a3c:	f002 fb2c 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a5a:	f002 fb1d 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a5e:	23c0      	movs	r3, #192	; 0xc0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4822      	ldr	r0, [pc, #136]	; (8000afc <MX_GPIO_Init+0x1e8>)
 8000a72:	f002 fb11 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a76:	2330      	movs	r3, #48	; 0x30
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a8a:	f002 fb05 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000aa6:	f002 faf7 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <MX_GPIO_Init+0x1e8>)
 8000ac4:	f002 fae8 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_GPIO_Init+0x1ec>)
 8000ae0:	f002 fada 	bl	8003098 <HAL_GPIO_Init>

}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40021800 	.word	0x40021800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020c00 	.word	0x40020c00

08000b04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <MX_I2C1_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_I2C1_Init+0x50>)
 8000b42:	f002 fc5f 	bl	8003404 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f001 fd0a 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000052c 	.word	0x2000052c
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_I2C_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	; 0xc0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <HAL_I2C_MspInit+0x8c>)
 8000bba:	f002 fa6d 	bl	8003098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <LCD_WR_REG+0x1c>)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	8013      	strh	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	600ffffe 	.word	0x600ffffe

08000c10 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <LCD_WR_DATA+0x1c>)
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	8053      	strh	r3, [r2, #2]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	600ffffe 	.word	0x600ffffe

08000c30 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <LCD_RD_DATA+0x20>)
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	b29b      	uxth	r3, r3
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	600ffffe 	.word	0x600ffffe

08000c54 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	4623      	mov	r3, r4
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	4603      	mov	r3, r0
 8000c68:	80bb      	strh	r3, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	807b      	strh	r3, [r7, #2]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c72:	202a      	movs	r0, #42	; 0x2a
 8000c74:	f7ff ffbc 	bl	8000bf0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	0a1b      	lsrs	r3, r3, #8
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffc6 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffc0 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c90:	887b      	ldrh	r3, [r7, #2]
 8000c92:	0a1b      	lsrs	r3, r3, #8
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ffba 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffb4 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ca8:	202b      	movs	r0, #43	; 0x2b
 8000caa:	f7ff ffa1 	bl	8000bf0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffab 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000cba:	88bb      	ldrh	r3, [r7, #4]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ffa5 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff9f 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000cd2:	883b      	ldrh	r3, [r7, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff99 	bl	8000c10 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cde:	202c      	movs	r0, #44	; 0x2c
 8000ce0:	f7ff ff86 	bl	8000bf0 <LCD_WR_REG>
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}

08000cec <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <lcd_Clear+0x70>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <lcd_Clear+0x70>)
 8000d10:	885b      	ldrh	r3, [r3, #2]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ff9b 	bl	8000c54 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	81fb      	strh	r3, [r7, #14]
 8000d22:	e011      	b.n	8000d48 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	81bb      	strh	r3, [r7, #12]
 8000d28:	e006      	b.n	8000d38 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff6f 	bl	8000c10 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	81bb      	strh	r3, [r7, #12]
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <lcd_Clear+0x70>)
 8000d3a:	885b      	ldrh	r3, [r3, #2]
 8000d3c:	89ba      	ldrh	r2, [r7, #12]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3f3      	bcc.n	8000d2a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	3301      	adds	r3, #1
 8000d46:	81fb      	strh	r3, [r7, #14]
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <lcd_Clear+0x70>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3e8      	bcc.n	8000d24 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000580 	.word	0x20000580

08000d60 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	88fa      	ldrh	r2, [r7, #6]
 8000d76:	88b9      	ldrh	r1, [r7, #4]
 8000d78:	88f8      	ldrh	r0, [r7, #6]
 8000d7a:	f7ff ff6b 	bl	8000c54 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff45 	bl	8000c10 <LCD_WR_DATA>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	4603      	mov	r3, r0
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	70fb      	strb	r3, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000db6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf14      	ite	ne
 8000dd2:	2301      	movne	r3, #1
 8000dd4:	2300      	moveq	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	fb12 f303 	smulbb	r3, r2, r3
 8000de6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	3b20      	subs	r3, #32
 8000dec:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4413      	add	r3, r2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b29c      	uxth	r4, r3
 8000dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	88b9      	ldrh	r1, [r7, #4]
 8000e0e:	88f8      	ldrh	r0, [r7, #6]
 8000e10:	4622      	mov	r2, r4
 8000e12:	f7ff ff1f 	bl	8000c54 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	827b      	strh	r3, [r7, #18]
 8000e1a:	e07a      	b.n	8000f12 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d028      	beq.n	8000e76 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d108      	bne.n	8000e3e <lcd_ShowChar+0xae>
 8000e2c:	78fa      	ldrb	r2, [r7, #3]
 8000e2e:	8a7b      	ldrh	r3, [r7, #18]
 8000e30:	493c      	ldr	r1, [pc, #240]	; (8000f24 <lcd_ShowChar+0x194>)
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	440a      	add	r2, r1
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	75fb      	strb	r3, [r7, #23]
 8000e3c:	e01b      	b.n	8000e76 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e42:	2b18      	cmp	r3, #24
 8000e44:	d10b      	bne.n	8000e5e <lcd_ShowChar+0xce>
 8000e46:	78fa      	ldrb	r2, [r7, #3]
 8000e48:	8a79      	ldrh	r1, [r7, #18]
 8000e4a:	4837      	ldr	r0, [pc, #220]	; (8000f28 <lcd_ShowChar+0x198>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	4403      	add	r3, r0
 8000e56:	440b      	add	r3, r1
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	75fb      	strb	r3, [r7, #23]
 8000e5c:	e00b      	b.n	8000e76 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e62:	2b20      	cmp	r3, #32
 8000e64:	d15a      	bne.n	8000f1c <lcd_ShowChar+0x18c>
 8000e66:	78fa      	ldrb	r2, [r7, #3]
 8000e68:	8a7b      	ldrh	r3, [r7, #18]
 8000e6a:	4930      	ldr	r1, [pc, #192]	; (8000f2c <lcd_ShowChar+0x19c>)
 8000e6c:	0192      	lsls	r2, r2, #6
 8000e6e:	440a      	add	r2, r1
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e044      	b.n	8000f06 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d120      	bne.n	8000ec6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e84:	7dfa      	ldrb	r2, [r7, #23]
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	fa42 f303 	asr.w	r3, r2, r3
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <lcd_ShowChar+0x10e>
 8000e94:	883b      	ldrh	r3, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feba 	bl	8000c10 <LCD_WR_DATA>
 8000e9c:	e003      	b.n	8000ea6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff feb5 	bl	8000c10 <LCD_WR_DATA>
				m++;
 8000ea6:	7d7b      	ldrb	r3, [r7, #21]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	7bfa      	ldrb	r2, [r7, #15]
 8000eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eb4:	fb02 f201 	mul.w	r2, r2, r1
 8000eb8:	1a9b      	subs	r3, r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d11f      	bne.n	8000f00 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	757b      	strb	r3, [r7, #21]
					break;
 8000ec4:	e022      	b.n	8000f0c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000ec6:	7dfa      	ldrb	r2, [r7, #23]
 8000ec8:	7dbb      	ldrb	r3, [r7, #22]
 8000eca:	fa42 f303 	asr.w	r3, r2, r3
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <lcd_ShowChar+0x152>
 8000ed6:	883a      	ldrh	r2, [r7, #0]
 8000ed8:	88b9      	ldrh	r1, [r7, #4]
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff3f 	bl	8000d60 <lcd_DrawPoint>
				x++;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ee8:	88fa      	ldrh	r2, [r7, #6]
 8000eea:	8a3b      	ldrh	r3, [r7, #16]
 8000eec:	1ad2      	subs	r2, r2, r3
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d105      	bne.n	8000f00 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ef4:	8a3b      	ldrh	r3, [r7, #16]
 8000ef6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ef8:	88bb      	ldrh	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	80bb      	strh	r3, [r7, #4]
					break;
 8000efe:	e005      	b.n	8000f0c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f00:	7dbb      	ldrb	r3, [r7, #22]
 8000f02:	3301      	adds	r3, #1
 8000f04:	75bb      	strb	r3, [r7, #22]
 8000f06:	7dbb      	ldrb	r3, [r7, #22]
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d9b7      	bls.n	8000e7c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f0c:	8a7b      	ldrh	r3, [r7, #18]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	827b      	strh	r3, [r7, #18]
 8000f12:	8a7a      	ldrh	r2, [r7, #18]
 8000f14:	89bb      	ldrh	r3, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d380      	bcc.n	8000e1c <lcd_ShowChar+0x8c>
 8000f1a:	e000      	b.n	8000f1e <lcd_ShowChar+0x18e>
		else return;
 8000f1c:	bf00      	nop
				}
			}
		}
	}
}
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	08007c68 	.word	0x08007c68
 8000f28:	08008258 	.word	0x08008258
 8000f2c:	08009428 	.word	0x08009428

08000f30 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f44:	e004      	b.n	8000f50 <mypow+0x20>
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	71ba      	strb	r2, [r7, #6]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f5      	bne.n	8000f46 <mypow+0x16>
	return result;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af04      	add	r7, sp, #16
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
 8000f82:	4613      	mov	r3, r2
 8000f84:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e059      	b.n	800104c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000f98:	887c      	ldrh	r4, [r7, #2]
 8000f9a:	787a      	ldrb	r2, [r7, #1]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f7ff ffc1 	bl	8000f30 <mypow>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	fbb4 f1f3 	udiv	r1, r4, r3
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <lcd_ShowIntNum+0xf8>)
 8000fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	1aca      	subs	r2, r1, r3
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d121      	bne.n	8001014 <lcd_ShowIntNum+0xac>
 8000fd0:	7bfa      	ldrb	r2, [r7, #15]
 8000fd2:	787b      	ldrb	r3, [r7, #1]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	da1c      	bge.n	8001014 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000fda:	7b3b      	ldrb	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d117      	bne.n	8001010 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	fb12 f303 	smulbb	r3, r2, r3
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b298      	uxth	r0, r3
 8000ff4:	8c3a      	ldrh	r2, [r7, #32]
 8000ff6:	88b9      	ldrh	r1, [r7, #4]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	4613      	mov	r3, r2
 8001008:	2220      	movs	r2, #32
 800100a:	f7ff fec1 	bl	8000d90 <lcd_ShowChar>
				continue;
 800100e:	e01a      	b.n	8001046 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001010:	2301      	movs	r3, #1
 8001012:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	b29a      	uxth	r2, r3
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	b29b      	uxth	r3, r3
 800101c:	fb12 f303 	smulbb	r3, r2, r3
 8001020:	b29a      	uxth	r2, r3
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4413      	add	r3, r2
 8001026:	b298      	uxth	r0, r3
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	3330      	adds	r3, #48	; 0x30
 800102c:	b2da      	uxtb	r2, r3
 800102e:	8c3c      	ldrh	r4, [r7, #32]
 8001030:	88b9      	ldrh	r1, [r7, #4]
 8001032:	2300      	movs	r3, #0
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4623      	mov	r3, r4
 8001042:	f7ff fea5 	bl	8000d90 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	3301      	adds	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	787b      	ldrb	r3, [r7, #1]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3a1      	bcc.n	8000f98 <lcd_ShowIntNum+0x30>
	}
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}
 800105e:	bf00      	nop
 8001060:	cccccccd 	.word	0xcccccccd

08001064 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <lcd_SetDir+0x44>)
 8001080:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001084:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <lcd_SetDir+0x44>)
 8001088:	22f0      	movs	r2, #240	; 0xf0
 800108a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800108c:	e006      	b.n	800109c <lcd_SetDir+0x38>
		lcddev.width=240;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <lcd_SetDir+0x44>)
 8001090:	22f0      	movs	r2, #240	; 0xf0
 8001092:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <lcd_SetDir+0x44>)
 8001096:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800109a:	805a      	strh	r2, [r3, #2]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000580 	.word	0x20000580

080010ac <lcd_init>:


void lcd_init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	48aa      	ldr	r0, [pc, #680]	; (8001360 <lcd_init+0x2b4>)
 80010b8:	f002 f98a 	bl	80033d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c0:	f001 fe22 	bl	8002d08 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ca:	48a5      	ldr	r0, [pc, #660]	; (8001360 <lcd_init+0x2b4>)
 80010cc:	f002 f980 	bl	80033d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d4:	f001 fe18 	bl	8002d08 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ffc3 	bl	8001064 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010de:	20d3      	movs	r0, #211	; 0xd3
 80010e0:	f7ff fd86 	bl	8000bf0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010e4:	f7ff fda4 	bl	8000c30 <LCD_RD_DATA>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b9d      	ldr	r3, [pc, #628]	; (8001364 <lcd_init+0x2b8>)
 80010ee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010f0:	f7ff fd9e 	bl	8000c30 <LCD_RD_DATA>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b9a      	ldr	r3, [pc, #616]	; (8001364 <lcd_init+0x2b8>)
 80010fa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010fc:	f7ff fd98 	bl	8000c30 <LCD_RD_DATA>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b97      	ldr	r3, [pc, #604]	; (8001364 <lcd_init+0x2b8>)
 8001106:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001108:	4b96      	ldr	r3, [pc, #600]	; (8001364 <lcd_init+0x2b8>)
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b94      	ldr	r3, [pc, #592]	; (8001364 <lcd_init+0x2b8>)
 8001112:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001114:	f7ff fd8c 	bl	8000c30 <LCD_RD_DATA>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b91      	ldr	r3, [pc, #580]	; (8001364 <lcd_init+0x2b8>)
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b8f      	ldr	r3, [pc, #572]	; (8001364 <lcd_init+0x2b8>)
 8001126:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001128:	20cf      	movs	r0, #207	; 0xcf
 800112a:	f7ff fd61 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fd6e 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001134:	20c1      	movs	r0, #193	; 0xc1
 8001136:	f7ff fd6b 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800113a:	2030      	movs	r0, #48	; 0x30
 800113c:	f7ff fd68 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001140:	20ed      	movs	r0, #237	; 0xed
 8001142:	f7ff fd55 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f7ff fd62 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800114c:	2003      	movs	r0, #3
 800114e:	f7ff fd5f 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001152:	2012      	movs	r0, #18
 8001154:	f7ff fd5c 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001158:	2081      	movs	r0, #129	; 0x81
 800115a:	f7ff fd59 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800115e:	20e8      	movs	r0, #232	; 0xe8
 8001160:	f7ff fd46 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001164:	2085      	movs	r0, #133	; 0x85
 8001166:	f7ff fd53 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800116a:	2010      	movs	r0, #16
 800116c:	f7ff fd50 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001170:	207a      	movs	r0, #122	; 0x7a
 8001172:	f7ff fd4d 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001176:	20cb      	movs	r0, #203	; 0xcb
 8001178:	f7ff fd3a 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800117c:	2039      	movs	r0, #57	; 0x39
 800117e:	f7ff fd47 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001182:	202c      	movs	r0, #44	; 0x2c
 8001184:	f7ff fd44 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fd41 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800118e:	2034      	movs	r0, #52	; 0x34
 8001190:	f7ff fd3e 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fd3b 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800119a:	20f7      	movs	r0, #247	; 0xf7
 800119c:	f7ff fd28 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011a0:	2020      	movs	r0, #32
 80011a2:	f7ff fd35 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011a6:	20ea      	movs	r0, #234	; 0xea
 80011a8:	f7ff fd22 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fd2f 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fd2c 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011b8:	20c0      	movs	r0, #192	; 0xc0
 80011ba:	f7ff fd19 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011be:	201b      	movs	r0, #27
 80011c0:	f7ff fd26 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011c4:	20c1      	movs	r0, #193	; 0xc1
 80011c6:	f7ff fd13 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff fd20 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011d0:	20c5      	movs	r0, #197	; 0xc5
 80011d2:	f7ff fd0d 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011d6:	2030      	movs	r0, #48	; 0x30
 80011d8:	f7ff fd1a 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011dc:	2030      	movs	r0, #48	; 0x30
 80011de:	f7ff fd17 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011e2:	20c7      	movs	r0, #199	; 0xc7
 80011e4:	f7ff fd04 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011e8:	20b7      	movs	r0, #183	; 0xb7
 80011ea:	f7ff fd11 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ee:	2036      	movs	r0, #54	; 0x36
 80011f0:	f7ff fcfe 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f7ff fd0b 	bl	8000c10 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80011fa:	203a      	movs	r0, #58	; 0x3a
 80011fc:	f7ff fcf8 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001200:	2055      	movs	r0, #85	; 0x55
 8001202:	f7ff fd05 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001206:	20b1      	movs	r0, #177	; 0xb1
 8001208:	f7ff fcf2 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fcff 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001212:	201a      	movs	r0, #26
 8001214:	f7ff fcfc 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001218:	20b6      	movs	r0, #182	; 0xb6
 800121a:	f7ff fce9 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff fcf6 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001224:	20a2      	movs	r0, #162	; 0xa2
 8001226:	f7ff fcf3 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800122a:	20f2      	movs	r0, #242	; 0xf2
 800122c:	f7ff fce0 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fced 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001236:	2026      	movs	r0, #38	; 0x26
 8001238:	f7ff fcda 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fce7 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001242:	20e0      	movs	r0, #224	; 0xe0
 8001244:	f7ff fcd4 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fce1 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800124e:	202a      	movs	r0, #42	; 0x2a
 8001250:	f7ff fcde 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f7ff fcdb 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fcd8 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001260:	200e      	movs	r0, #14
 8001262:	f7ff fcd5 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001266:	2008      	movs	r0, #8
 8001268:	f7ff fcd2 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800126c:	2054      	movs	r0, #84	; 0x54
 800126e:	f7ff fccf 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001272:	20a9      	movs	r0, #169	; 0xa9
 8001274:	f7ff fccc 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001278:	2043      	movs	r0, #67	; 0x43
 800127a:	f7ff fcc9 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800127e:	200a      	movs	r0, #10
 8001280:	f7ff fcc6 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001284:	200f      	movs	r0, #15
 8001286:	f7ff fcc3 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcc0 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fcbd 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fcba 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff fcb7 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012a2:	20e1      	movs	r0, #225	; 0xe1
 80012a4:	f7ff fca4 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fcb1 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012ae:	2015      	movs	r0, #21
 80012b0:	f7ff fcae 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012b4:	2017      	movs	r0, #23
 80012b6:	f7ff fcab 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012ba:	2007      	movs	r0, #7
 80012bc:	f7ff fca8 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012c0:	2011      	movs	r0, #17
 80012c2:	f7ff fca5 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012c6:	2006      	movs	r0, #6
 80012c8:	f7ff fca2 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012cc:	202b      	movs	r0, #43	; 0x2b
 80012ce:	f7ff fc9f 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012d2:	2056      	movs	r0, #86	; 0x56
 80012d4:	f7ff fc9c 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012d8:	203c      	movs	r0, #60	; 0x3c
 80012da:	f7ff fc99 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012de:	2005      	movs	r0, #5
 80012e0:	f7ff fc96 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012e4:	2010      	movs	r0, #16
 80012e6:	f7ff fc93 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f7ff fc90 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012f0:	203f      	movs	r0, #63	; 0x3f
 80012f2:	f7ff fc8d 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012f6:	203f      	movs	r0, #63	; 0x3f
 80012f8:	f7ff fc8a 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012fc:	200f      	movs	r0, #15
 80012fe:	f7ff fc87 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001302:	202b      	movs	r0, #43	; 0x2b
 8001304:	f7ff fc74 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fc81 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fc7e 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff fc7b 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800131a:	203f      	movs	r0, #63	; 0x3f
 800131c:	f7ff fc78 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001320:	202a      	movs	r0, #42	; 0x2a
 8001322:	f7ff fc65 	bl	8000bf0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fc72 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc6f 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff fc6c 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001338:	20ef      	movs	r0, #239	; 0xef
 800133a:	f7ff fc69 	bl	8000c10 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800133e:	2011      	movs	r0, #17
 8001340:	f7ff fc56 	bl	8000bf0 <LCD_WR_REG>
	HAL_Delay(120);
 8001344:	2078      	movs	r0, #120	; 0x78
 8001346:	f001 fcdf 	bl	8002d08 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800134a:	2029      	movs	r0, #41	; 0x29
 800134c:	f7ff fc50 	bl	8000bf0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <lcd_init+0x2bc>)
 8001358:	f002 f83a 	bl	80033d0 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020800 	.word	0x40020800
 8001364:	20000580 	.word	0x20000580
 8001368:	40020000 	.word	0x40020000

0800136c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08b      	sub	sp, #44	; 0x2c
 8001370:	af04      	add	r7, sp, #16
 8001372:	60ba      	str	r2, [r7, #8]
 8001374:	461a      	mov	r2, r3
 8001376:	4603      	mov	r3, r0
 8001378:	81fb      	strh	r3, [r7, #14]
 800137a:	460b      	mov	r3, r1
 800137c:	81bb      	strh	r3, [r7, #12]
 800137e:	4613      	mov	r3, r2
 8001380:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 800138a:	e048      	b.n	800141e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d145      	bne.n	800141e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001392:	89fa      	ldrh	r2, [r7, #14]
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <lcd_ShowStr+0xc4>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dc3f      	bgt.n	8001428 <lcd_ShowStr+0xbc>
 80013a8:	89ba      	ldrh	r2, [r7, #12]
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <lcd_ShowStr+0xc4>)
 80013ac:	885b      	ldrh	r3, [r3, #2]
 80013ae:	4619      	mov	r1, r3
 80013b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b4:	1acb      	subs	r3, r1, r3
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dc36      	bgt.n	8001428 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b80      	cmp	r3, #128	; 0x80
 80013c0:	d902      	bls.n	80013c8 <lcd_ShowStr+0x5c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	75fb      	strb	r3, [r7, #23]
 80013c6:	e02a      	b.n	800141e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b0d      	cmp	r3, #13
 80013ce:	d10b      	bne.n	80013e8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	89bb      	ldrh	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013dc:	8abb      	ldrh	r3, [r7, #20]
 80013de:	81fb      	strh	r3, [r7, #14]
					str++;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	e017      	b.n	8001418 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	88fc      	ldrh	r4, [r7, #6]
 80013ee:	89b9      	ldrh	r1, [r7, #12]
 80013f0:	89f8      	ldrh	r0, [r7, #14]
 80013f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4623      	mov	r3, r4
 8001404:	f7ff fcc4 	bl	8000d90 <lcd_ShowChar>
					x+=sizey/2;
 8001408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b29a      	uxth	r2, r3
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	4413      	add	r3, r2
 8001416:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1b2      	bne.n	800138c <lcd_ShowStr+0x20>
 8001426:	e000      	b.n	800142a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001428:	bf00      	nop
			}
		}
	}
}
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20000580 	.word	0x20000580

08001434 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af04      	add	r7, sp, #16
 800143a:	60ba      	str	r2, [r7, #8]
 800143c:	461a      	mov	r2, r3
 800143e:	4603      	mov	r3, r0
 8001440:	81fb      	strh	r3, [r7, #14]
 8001442:	460b      	mov	r3, r1
 8001444:	81bb      	strh	r3, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f7fe fec0 	bl	80001d0 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <lcd_StrCenter+0x60>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	8afb      	ldrh	r3, [r7, #22]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	0fda      	lsrs	r2, r3, #31
 8001462:	4413      	add	r3, r2
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001468:	89fa      	ldrh	r2, [r7, #14]
 800146a:	8abb      	ldrh	r3, [r7, #20]
 800146c:	4413      	add	r3, r2
 800146e:	b298      	uxth	r0, r3
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	89b9      	ldrh	r1, [r7, #12]
 8001474:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	8c3b      	ldrh	r3, [r7, #32]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f7ff ff70 	bl	800136c <lcd_ShowStr>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000580 	.word	0x20000580

08001498 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800149c:	2201      	movs	r2, #1
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <led7_init+0x14>)
 80014a2:	f001 ff95 	bl	80033d0 <HAL_GPIO_WritePin>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021800 	.word	0x40021800

080014b0 <led7_Scan>:

void led7_Scan(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <led7_Scan+0x104>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <led7_Scan+0x104>)
 80014be:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <led7_Scan+0x108>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a3d      	ldr	r2, [pc, #244]	; (80015bc <led7_Scan+0x10c>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <led7_Scan+0x104>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <led7_Scan+0x104>)
 80014da:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <led7_Scan+0x108>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d847      	bhi.n	8001574 <led7_Scan+0xc4>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <led7_Scan+0x3c>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	080014fd 	.word	0x080014fd
 80014f0:	0800151b 	.word	0x0800151b
 80014f4:	08001539 	.word	0x08001539
 80014f8:	08001557 	.word	0x08001557
	case 0:
		spi_buffer |= 0x00b0;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <led7_Scan+0x104>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <led7_Scan+0x104>)
 8001508:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <led7_Scan+0x104>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001512:	b29a      	uxth	r2, r3
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <led7_Scan+0x104>)
 8001516:	801a      	strh	r2, [r3, #0]
		break;
 8001518:	e02d      	b.n	8001576 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <led7_Scan+0x104>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <led7_Scan+0x104>)
 8001526:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <led7_Scan+0x104>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f023 0320 	bic.w	r3, r3, #32
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <led7_Scan+0x104>)
 8001534:	801a      	strh	r2, [r3, #0]
		break;
 8001536:	e01e      	b.n	8001576 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <led7_Scan+0x104>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <led7_Scan+0x104>)
 8001544:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <led7_Scan+0x104>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	f023 0310 	bic.w	r3, r3, #16
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <led7_Scan+0x104>)
 8001552:	801a      	strh	r2, [r3, #0]
		break;
 8001554:	e00f      	b.n	8001576 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001556:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <led7_Scan+0x104>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <led7_Scan+0x104>)
 8001562:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <led7_Scan+0x104>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <led7_Scan+0x104>)
 8001570:	801a      	strh	r2, [r3, #0]
		break;
 8001572:	e000      	b.n	8001576 <led7_Scan+0xc6>
	default:
		break;
 8001574:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <led7_Scan+0x108>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	425a      	negs	r2, r3
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	f002 0203 	and.w	r2, r2, #3
 8001586:	bf58      	it	pl
 8001588:	4253      	negpl	r3, r2
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <led7_Scan+0x108>)
 800158c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <led7_Scan+0x110>)
 8001594:	f001 ff1c 	bl	80033d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001598:	2301      	movs	r3, #1
 800159a:	2202      	movs	r2, #2
 800159c:	4905      	ldr	r1, [pc, #20]	; (80015b4 <led7_Scan+0x104>)
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <led7_Scan+0x114>)
 80015a0:	f003 fbed 	bl	8004d7e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <led7_Scan+0x110>)
 80015aa:	f001 ff11 	bl	80033d0 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000004 	.word	0x20000004
 80015b8:	20000414 	.word	0x20000414
 80015bc:	20000000 	.word	0x20000000
 80015c0:	40021800 	.word	0x40021800
 80015c4:	20000640 	.word	0x20000640

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ce:	f001 fb29 	bl	8002c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d2:	f000 f863 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d6:	f7ff f99d 	bl	8000914 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015da:	f001 f967 	bl	80028ac <MX_TIM2_Init>
  MX_SPI1_Init();
 80015de:	f001 f839 	bl	8002654 <MX_SPI1_Init>
  MX_FSMC_Init();
 80015e2:	f7ff f8c7 	bl	8000774 <MX_FSMC_Init>
  MX_I2C1_Init();
 80015e6:	f7ff fa8d 	bl	8000b04 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015ea:	f001 fa39 	bl	8002a60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80015ee:	f000 f8bf 	bl	8001770 <system_init>
  updateTime();
 80015f2:	f000 f8e1 	bl	80017b8 <updateTime>
  /* USER CODE END 2 */
uint16_t index = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	80fb      	strh	r3, [r7, #6]
int count = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer[1]);
 80015fe:	bf00      	nop
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <main+0xc4>)
 8001602:	885b      	ldrh	r3, [r3, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0fb      	beq.n	8001600 <main+0x38>
	  flag_timer[1] = 0;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <main+0xc4>)
 800160a:	2200      	movs	r2, #0
 800160c:	805a      	strh	r2, [r3, #2]
	  button_Scan();
 800160e:	f7fe ffbf 	bl	8000590 <button_Scan>
	  ButtonHandle();
 8001612:	f000 fb9f 	bl	8001d54 <ButtonHandle>
	  button_Hour();
 8001616:	f000 f8ef 	bl	80017f8 <button_Hour>
	  switch(mode){
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <main+0xc8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d02a      	beq.n	8001678 <main+0xb0>
 8001622:	2b02      	cmp	r3, #2
 8001624:	dc2d      	bgt.n	8001682 <main+0xba>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <main+0x68>
 800162a:	2b01      	cmp	r3, #1
 800162c:	d01f      	beq.n	800166e <main+0xa6>
	  case 2:
		  displayMode();
		  displayTimeMode2();
		  break;
	  default:
		  break;
 800162e:	e028      	b.n	8001682 <main+0xba>
		  ds3231_ReadTime();
 8001630:	f7ff f83c 	bl	80006ac <ds3231_ReadTime>
		  if(!timeOut) checkTimeOut();
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <main+0xcc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <main+0x78>
 800163c:	f000 fd32 	bl	80020a4 <checkTimeOut>
		  if(timeOut == 1) {
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <main+0xcc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10d      	bne.n	8001664 <main+0x9c>
			  lcd_StrCenter(0, 2, "ALARM!!!", RED, BLUE, 16, 1);
 8001648:	2301      	movs	r3, #1
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2310      	movs	r3, #16
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	231f      	movs	r3, #31
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <main+0xd0>)
 800165a:	2102      	movs	r1, #2
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fee9 	bl	8001434 <lcd_StrCenter>
			continue;
 8001662:	e011      	b.n	8001688 <main+0xc0>
		  displayMode();
 8001664:	f000 f8fe 	bl	8001864 <displayMode>
		  displayTime();
 8001668:	f000 f924 	bl	80018b4 <displayTime>
		  break;
 800166c:	e00a      	b.n	8001684 <main+0xbc>
		  displayMode();
 800166e:	f000 f8f9 	bl	8001864 <displayMode>
		  displayTimeMode1();
 8001672:	f000 f96b 	bl	800194c <displayTimeMode1>
		  break;
 8001676:	e005      	b.n	8001684 <main+0xbc>
		  displayMode();
 8001678:	f000 f8f4 	bl	8001864 <displayMode>
		  displayTimeMode2();
 800167c:	f000 f9ee 	bl	8001a5c <displayTimeMode2>
		  break;
 8001680:	e000      	b.n	8001684 <main+0xbc>
		  break;
 8001682:	bf00      	nop
	  }
	  updateUart();
 8001684:	f000 fd46 	bl	8002114 <updateUart>
	  while(!flag_timer[1]);
 8001688:	e7b9      	b.n	80015fe <main+0x36>
 800168a:	bf00      	nop
 800168c:	20000474 	.word	0x20000474
 8001690:	20000418 	.word	0x20000418
 8001694:	20000424 	.word	0x20000424
 8001698:	08007b50 	.word	0x08007b50

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	2230      	movs	r2, #48	; 0x30
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 fe0e 	bl	80072cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <SystemClock_Config+0xcc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <SystemClock_Config+0xcc>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <SystemClock_Config+0xcc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <SystemClock_Config+0xd0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a21      	ldr	r2, [pc, #132]	; (800176c <SystemClock_Config+0xd0>)
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <SystemClock_Config+0xd0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001700:	2310      	movs	r3, #16
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001704:	2302      	movs	r3, #2
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800170c:	2308      	movs	r3, #8
 800170e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001710:	23a8      	movs	r3, #168	; 0xa8
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001714:	2302      	movs	r3, #2
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001718:	2304      	movs	r3, #4
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fe2f 	bl	8004384 <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800172c:	f000 ff1a 	bl	8002564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2105      	movs	r1, #5
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f890 	bl	8004874 <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800175a:	f000 ff03 	bl	8002564 <Error_Handler>
  }
}
 800175e:	bf00      	nop
 8001760:	3750      	adds	r7, #80	; 0x50
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000

08001770 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2120      	movs	r1, #32
 8001778:	480e      	ldr	r0, [pc, #56]	; (80017b4 <system_init+0x44>)
 800177a:	f001 fe29 	bl	80033d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2140      	movs	r1, #64	; 0x40
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <system_init+0x44>)
 8001784:	f001 fe24 	bl	80033d0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2110      	movs	r1, #16
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <system_init+0x44>)
 800178e:	f001 fe1f 	bl	80033d0 <HAL_GPIO_WritePin>
	  timer_init();
 8001792:	f000 feed 	bl	8002570 <timer_init>
	  led7_init();
 8001796:	f7ff fe7f 	bl	8001498 <led7_init>
	  button_init();
 800179a:	f7fe feed 	bl	8000578 <button_init>
	  lcd_init();
 800179e:	f7ff fc85 	bl	80010ac <lcd_init>
	  uart_init_rs232();
 80017a2:	f001 f8f5 	bl	8002990 <uart_init_rs232>
	  setTimer(50, 1);
 80017a6:	2101      	movs	r1, #1
 80017a8:	2032      	movs	r0, #50	; 0x32
 80017aa:	f000 feeb 	bl	8002584 <setTimer>
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <updateTime>:
			led7_SetDigit(i/10, 2, 0);
			led7_SetDigit(i%10, 3, 0);
		}
	}
}
void updateTime(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80017bc:	2118      	movs	r1, #24
 80017be:	2006      	movs	r0, #6
 80017c0:	f7fe ff52 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80017c4:	210b      	movs	r1, #11
 80017c6:	2005      	movs	r0, #5
 80017c8:	f7fe ff4e 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 13);
 80017cc:	210d      	movs	r1, #13
 80017ce:	2004      	movs	r0, #4
 80017d0:	f7fe ff4a 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 4);
 80017d4:	2104      	movs	r1, #4
 80017d6:	2003      	movs	r0, #3
 80017d8:	f7fe ff46 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 80017dc:	2109      	movs	r1, #9
 80017de:	2002      	movs	r0, #2
 80017e0:	f7fe ff42 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 27);
 80017e4:	211b      	movs	r1, #27
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7fe ff3e 	bl	8000668 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80017ec:	2117      	movs	r1, #23
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7fe ff3a 	bl	8000668 <ds3231_Write>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <button_Hour>:
		uart_Rs232SendNum(ds3231_sec);
		uart_Rs232SendString("\n");
	}
}

void button_Hour(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af04      	add	r7, sp, #16
	if (button_count[4] == 1){
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <button_Hour+0x5c>)
 8001800:	891b      	ldrh	r3, [r3, #8]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d123      	bne.n	800184e <button_Hour+0x56>
		hand_mode = 1;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <button_Hour+0x60>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
		mode = 5;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <button_Hour+0x64>)
 800180e:	2205      	movs	r2, #5
 8001810:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fa6a 	bl	8000cec <lcd_Clear>
		lcd_ShowStr(20, 30, "Mode: ", WHITE, RED, 24, 0);
 8001818:	2300      	movs	r3, #0
 800181a:	9302      	str	r3, [sp, #8]
 800181c:	2318      	movs	r3, #24
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182a:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <button_Hour+0x68>)
 800182c:	211e      	movs	r1, #30
 800182e:	2014      	movs	r0, #20
 8001830:	f7ff fd9c 	bl	800136c <lcd_ShowStr>
		lcd_ShowIntNum(150, 30, 3, 1, GREEN, BLACK, 24);
 8001834:	2318      	movs	r3, #24
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	211e      	movs	r1, #30
 8001848:	2096      	movs	r0, #150	; 0x96
 800184a:	f7ff fb8d 	bl	8000f68 <lcd_ShowIntNum>
	}
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200004ac 	.word	0x200004ac
 8001858:	20000420 	.word	0x20000420
 800185c:	20000418 	.word	0x20000418
 8001860:	08007b64 	.word	0x08007b64

08001864 <displayMode>:

void displayMode () {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af04      	add	r7, sp, #16
	 lcd_ShowStr(20, 30, "Mode: ", WHITE, RED, 24, 0);
 800186a:	2300      	movs	r3, #0
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2318      	movs	r3, #24
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <displayMode+0x48>)
 800187e:	211e      	movs	r1, #30
 8001880:	2014      	movs	r0, #20
 8001882:	f7ff fd73 	bl	800136c <lcd_ShowStr>
	 lcd_ShowIntNum(150, 30, mode, 1, GREEN, BLACK, 24);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <displayMode+0x4c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	2318      	movs	r3, #24
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2301      	movs	r3, #1
 800189c:	211e      	movs	r1, #30
 800189e:	2096      	movs	r0, #150	; 0x96
 80018a0:	f7ff fb62 	bl	8000f68 <lcd_ShowIntNum>
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	08007b64 	.word	0x08007b64
 80018b0:	20000418 	.word	0x20000418

080018b4 <displayTime>:

void displayTime(){
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af04      	add	r7, sp, #16
	for (int i = 0; i < 7; i ++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	e03b      	b.n	8001938 <displayTime+0x84>
		lcd_ShowIntNum (dateTimeInfo[i].x_axis, dateTimeInfo[i].y_axis,
 80018c0:	4921      	ldr	r1, [pc, #132]	; (8001948 <displayTime+0x94>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b298      	uxth	r0, r3
 80018d2:	491d      	ldr	r1, [pc, #116]	; (8001948 <displayTime+0x94>)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3304      	adds	r3, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29c      	uxth	r4, r3
					*(dateTimeInfo[i].showName), 2, dateTimeInfo[i].fontColor,
 80018e6:	4918      	ldr	r1, [pc, #96]	; (8001948 <displayTime+0x94>)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	3308      	adds	r3, #8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	781b      	ldrb	r3, [r3, #0]
		lcd_ShowIntNum (dateTimeInfo[i].x_axis, dateTimeInfo[i].y_axis,
 80018fa:	b29d      	uxth	r5, r3
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <displayTime+0x94>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	015b      	lsls	r3, r3, #5
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	330c      	adds	r3, #12
 800190c:	8819      	ldrh	r1, [r3, #0]
 800190e:	4e0e      	ldr	r6, [pc, #56]	; (8001948 <displayTime+0x94>)
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4433      	add	r3, r6
 800191c:	330e      	adds	r3, #14
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	2218      	movs	r2, #24
 8001922:	9202      	str	r2, [sp, #8]
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	9100      	str	r1, [sp, #0]
 8001928:	2302      	movs	r3, #2
 800192a:	462a      	mov	r2, r5
 800192c:	4621      	mov	r1, r4
 800192e:	f7ff fb1b 	bl	8000f68 <lcd_ShowIntNum>
	for (int i = 0; i < 7; i ++) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3301      	adds	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b06      	cmp	r3, #6
 800193c:	ddc0      	ble.n	80018c0 <displayTime+0xc>
					dateTimeInfo[i].bgColor, 24);
	}
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001948:	20000008 	.word	0x20000008

0800194c <displayTimeMode1>:

int countMode1 = 0;
int temp_value[7] = {0};
int save_time[7] = {0};
void displayTimeMode1(){
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b085      	sub	sp, #20
 8001950:	af04      	add	r7, sp, #16
//	lcd_Clear(BLACK);
	countMode1 = (countMode1 + 1) % 5;
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <displayTimeMode1+0xfc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1c59      	adds	r1, r3, #1
 8001958:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <displayTimeMode1+0x100>)
 800195a:	fb83 2301 	smull	r2, r3, r3, r1
 800195e:	105a      	asrs	r2, r3, #1
 8001960:	17cb      	asrs	r3, r1, #31
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	1aca      	subs	r2, r1, r3
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <displayTimeMode1+0xfc>)
 800196e:	601a      	str	r2, [r3, #0]
	if(countMode1 == 0){
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <displayTimeMode1+0xfc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d138      	bne.n	80019ea <displayTimeMode1+0x9e>
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <displayTimeMode1+0x104>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4935      	ldr	r1, [pc, #212]	; (8001a54 <displayTimeMode1+0x108>)
 800197e:	4613      	mov	r3, r2
 8001980:	015b      	lsls	r3, r3, #5
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b298      	uxth	r0, r3
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <displayTimeMode1+0x104>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4930      	ldr	r1, [pc, #192]	; (8001a54 <displayTimeMode1+0x108>)
 8001992:	4613      	mov	r3, r2
 8001994:	015b      	lsls	r3, r3, #5
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3304      	adds	r3, #4
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29c      	uxth	r4, r3
								temp_value[editIndex], 2, dateTimeInfo[editIndex].fontColor,
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <displayTimeMode1+0x104>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <displayTimeMode1+0x10c>)
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 80019ac:	b29d      	uxth	r5, r3
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <displayTimeMode1+0x104>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4928      	ldr	r1, [pc, #160]	; (8001a54 <displayTimeMode1+0x108>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	015b      	lsls	r3, r3, #5
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	330c      	adds	r3, #12
 80019c0:	8819      	ldrh	r1, [r3, #0]
 80019c2:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <displayTimeMode1+0x104>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4e23      	ldr	r6, [pc, #140]	; (8001a54 <displayTimeMode1+0x108>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	015b      	lsls	r3, r3, #5
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4433      	add	r3, r6
 80019d2:	330e      	adds	r3, #14
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	2218      	movs	r2, #24
 80019d8:	9202      	str	r2, [sp, #8]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9100      	str	r1, [sp, #0]
 80019de:	2302      	movs	r3, #2
 80019e0:	462a      	mov	r2, r5
 80019e2:	4621      	mov	r1, r4
 80019e4:	f7ff fac0 	bl	8000f68 <lcd_ShowIntNum>
	else {
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
								*(dateTimeInfo[editIndex].showName), 2, BLACK,
								BLACK, 24);
	}
}
 80019e8:	e029      	b.n	8001a3e <displayTimeMode1+0xf2>
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <displayTimeMode1+0x104>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4919      	ldr	r1, [pc, #100]	; (8001a54 <displayTimeMode1+0x108>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b298      	uxth	r0, r3
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <displayTimeMode1+0x104>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4914      	ldr	r1, [pc, #80]	; (8001a54 <displayTimeMode1+0x108>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b299      	uxth	r1, r3
								*(dateTimeInfo[editIndex].showName), 2, BLACK,
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <displayTimeMode1+0x104>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4c0e      	ldr	r4, [pc, #56]	; (8001a54 <displayTimeMode1+0x108>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4423      	add	r3, r4
 8001a24:	3308      	adds	r3, #8
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	781b      	ldrb	r3, [r3, #0]
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2318      	movs	r3, #24
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2300      	movs	r3, #0
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f7ff fa95 	bl	8000f68 <lcd_ShowIntNum>
}
 8001a3e:	bf00      	nop
 8001a40:	3704      	adds	r7, #4
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000428 	.word	0x20000428
 8001a4c:	66666667 	.word	0x66666667
 8001a50:	2000041c 	.word	0x2000041c
 8001a54:	20000008 	.word	0x20000008
 8001a58:	2000042c 	.word	0x2000042c

08001a5c <displayTimeMode2>:

void displayTimeMode2(){
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af04      	add	r7, sp, #16
//	lcd_Clear(BLACK);
	countMode1 = (countMode1 + 1) % 5;
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <displayTimeMode2+0xfc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1c59      	adds	r1, r3, #1
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <displayTimeMode2+0x100>)
 8001a6a:	fb83 2301 	smull	r2, r3, r3, r1
 8001a6e:	105a      	asrs	r2, r3, #1
 8001a70:	17cb      	asrs	r3, r1, #31
 8001a72:	1ad2      	subs	r2, r2, r3
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	1aca      	subs	r2, r1, r3
 8001a7c:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <displayTimeMode2+0xfc>)
 8001a7e:	601a      	str	r2, [r3, #0]
	if(countMode1 == 0){
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <displayTimeMode2+0xfc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d138      	bne.n	8001afa <displayTimeMode2+0x9e>
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <displayTimeMode2+0x104>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <displayTimeMode2+0x108>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b298      	uxth	r0, r3
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <displayTimeMode2+0x104>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4930      	ldr	r1, [pc, #192]	; (8001b64 <displayTimeMode2+0x108>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	015b      	lsls	r3, r3, #5
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3304      	adds	r3, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b29c      	uxth	r4, r3
										temp_value[editIndex], 2, dateTimeInfo[editIndex].fontColor,
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <displayTimeMode2+0x104>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <displayTimeMode2+0x10c>)
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001abc:	b29d      	uxth	r5, r3
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <displayTimeMode2+0x104>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4928      	ldr	r1, [pc, #160]	; (8001b64 <displayTimeMode2+0x108>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	015b      	lsls	r3, r3, #5
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	330c      	adds	r3, #12
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <displayTimeMode2+0x104>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4e23      	ldr	r6, [pc, #140]	; (8001b64 <displayTimeMode2+0x108>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	015b      	lsls	r3, r3, #5
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4433      	add	r3, r6
 8001ae2:	330e      	adds	r3, #14
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2218      	movs	r2, #24
 8001ae8:	9202      	str	r2, [sp, #8]
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9100      	str	r1, [sp, #0]
 8001aee:	2302      	movs	r3, #2
 8001af0:	462a      	mov	r2, r5
 8001af2:	4621      	mov	r1, r4
 8001af4:	f7ff fa38 	bl	8000f68 <lcd_ShowIntNum>
	else {
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
										*(dateTimeInfo[editIndex].showName), 2, BLACK,
										BLACK, 24);
	}
}
 8001af8:	e029      	b.n	8001b4e <displayTimeMode2+0xf2>
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <displayTimeMode2+0x104>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4919      	ldr	r1, [pc, #100]	; (8001b64 <displayTimeMode2+0x108>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <displayTimeMode2+0x104>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4914      	ldr	r1, [pc, #80]	; (8001b64 <displayTimeMode2+0x108>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b299      	uxth	r1, r3
										*(dateTimeInfo[editIndex].showName), 2, BLACK,
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <displayTimeMode2+0x104>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4c0e      	ldr	r4, [pc, #56]	; (8001b64 <displayTimeMode2+0x108>)
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4423      	add	r3, r4
 8001b34:	3308      	adds	r3, #8
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	781b      	ldrb	r3, [r3, #0]
		lcd_ShowIntNum (dateTimeInfo[editIndex].x_axis, dateTimeInfo[editIndex].y_axis,
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2318      	movs	r3, #24
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f7ff fa0d 	bl	8000f68 <lcd_ShowIntNum>
}
 8001b4e:	bf00      	nop
 8001b50:	3704      	adds	r7, #4
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000428 	.word	0x20000428
 8001b5c:	66666667 	.word	0x66666667
 8001b60:	2000041c 	.word	0x2000041c
 8001b64:	20000008 	.word	0x20000008
 8001b68:	2000042c 	.word	0x2000042c

08001b6c <logic_handle>:

int logic_handle(int index, int value){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d841      	bhi.n	8001c00 <logic_handle+0x94>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <logic_handle+0x18>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001ba1 	.word	0x08001ba1
 8001b88:	08001bab 	.word	0x08001bab
 8001b8c:	08001bb5 	.word	0x08001bb5
 8001b90:	08001bbf 	.word	0x08001bbf
 8001b94:	08001bc9 	.word	0x08001bc9
 8001b98:	08001bd3 	.word	0x08001bd3
 8001b9c:	08001bdd 	.word	0x08001bdd
	switch(index){
	case 0:
		if(value > 23) return 0;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b17      	cmp	r3, #23
 8001ba4:	dd1f      	ble.n	8001be6 <logic_handle+0x7a>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e02b      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 1:
		if(value > 59) return 0;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b3b      	cmp	r3, #59	; 0x3b
 8001bae:	dd1c      	ble.n	8001bea <logic_handle+0x7e>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e026      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 2:
		if(value > 59) return 0;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b3b      	cmp	r3, #59	; 0x3b
 8001bb8:	dd19      	ble.n	8001bee <logic_handle+0x82>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e021      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 3:
		if(value > 8) return 2;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	dd16      	ble.n	8001bf2 <logic_handle+0x86>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e01c      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 4:
		if(value > 31) return 1;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b1f      	cmp	r3, #31
 8001bcc:	dd13      	ble.n	8001bf6 <logic_handle+0x8a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e017      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 5:
		if(value > 12) return 1;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	dd10      	ble.n	8001bfa <logic_handle+0x8e>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e012      	b.n	8001c02 <logic_handle+0x96>
		break;
	case 6:
		if(value > 99) return 0;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b63      	cmp	r3, #99	; 0x63
 8001be0:	dd0d      	ble.n	8001bfe <logic_handle+0x92>
 8001be2:	2300      	movs	r3, #0
 8001be4:	e00d      	b.n	8001c02 <logic_handle+0x96>
		break;
 8001be6:	bf00      	nop
 8001be8:	e00a      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bea:	bf00      	nop
 8001bec:	e008      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bee:	bf00      	nop
 8001bf0:	e006      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bf2:	bf00      	nop
 8001bf4:	e004      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bf6:	bf00      	nop
 8001bf8:	e002      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bfa:	bf00      	nop
 8001bfc:	e000      	b.n	8001c00 <logic_handle+0x94>
		break;
 8001bfe:	bf00      	nop
	}
	return value;
 8001c00:	683b      	ldr	r3, [r7, #0]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <logic_handle1>:

int logic_handle1(int index, int value){
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b06      	cmp	r3, #6
 8001c1e:	d841      	bhi.n	8001ca4 <logic_handle1+0x94>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <logic_handle1+0x18>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c45 	.word	0x08001c45
 8001c2c:	08001c4f 	.word	0x08001c4f
 8001c30:	08001c59 	.word	0x08001c59
 8001c34:	08001c63 	.word	0x08001c63
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c77 	.word	0x08001c77
 8001c40:	08001c81 	.word	0x08001c81
	switch(index){
	case 0:
		if(value > 23) return 1;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b17      	cmp	r3, #23
 8001c48:	dd1f      	ble.n	8001c8a <logic_handle1+0x7a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e02b      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 1:
		if(value > 59) return 1;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b3b      	cmp	r3, #59	; 0x3b
 8001c52:	dd1c      	ble.n	8001c8e <logic_handle1+0x7e>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e026      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 2:
		if(value > 59) return 1;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b3b      	cmp	r3, #59	; 0x3b
 8001c5c:	dd19      	ble.n	8001c92 <logic_handle1+0x82>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e021      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 3:
		if(value > 8) return 1;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	dd16      	ble.n	8001c96 <logic_handle1+0x86>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01c      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 4:
		if(value > 31) return 1;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b1f      	cmp	r3, #31
 8001c70:	dd13      	ble.n	8001c9a <logic_handle1+0x8a>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e017      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 5:
		if(value > 12) return 1;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	dd10      	ble.n	8001c9e <logic_handle1+0x8e>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e012      	b.n	8001ca6 <logic_handle1+0x96>
		break;
	case 6:
		if(value > 99) return 1;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b63      	cmp	r3, #99	; 0x63
 8001c84:	dd0d      	ble.n	8001ca2 <logic_handle1+0x92>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00d      	b.n	8001ca6 <logic_handle1+0x96>
		break;
 8001c8a:	bf00      	nop
 8001c8c:	e00a      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001c8e:	bf00      	nop
 8001c90:	e008      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001c92:	bf00      	nop
 8001c94:	e006      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001c96:	bf00      	nop
 8001c98:	e004      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001c9a:	bf00      	nop
 8001c9c:	e002      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001c9e:	bf00      	nop
 8001ca0:	e000      	b.n	8001ca4 <logic_handle1+0x94>
		break;
 8001ca2:	bf00      	nop
	}
	return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <update>:

void update(int index, int value){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d842      	bhi.n	8001d4a <update+0x96>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <update+0x18>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001ce9 	.word	0x08001ce9
 8001cd0:	08001cf7 	.word	0x08001cf7
 8001cd4:	08001d05 	.word	0x08001d05
 8001cd8:	08001d13 	.word	0x08001d13
 8001cdc:	08001d21 	.word	0x08001d21
 8001ce0:	08001d2f 	.word	0x08001d2f
 8001ce4:	08001d3d 	.word	0x08001d3d
	switch(index){
	case 0:
		ds3231_Write(ADDRESS_HOUR, value);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f7fe fcba 	bl	8000668 <ds3231_Write>
		break;
 8001cf4:	e029      	b.n	8001d4a <update+0x96>
	case 1:
		ds3231_Write(ADDRESS_MIN, value);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7fe fcb3 	bl	8000668 <ds3231_Write>
		break;
 8001d02:	e022      	b.n	8001d4a <update+0x96>
	case 2:
		ds3231_Write(ADDRESS_SEC, value);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7fe fcac 	bl	8000668 <ds3231_Write>
		break;
 8001d10:	e01b      	b.n	8001d4a <update+0x96>
	case 3:
		ds3231_Write(ADDRESS_DAY, value);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f7fe fca5 	bl	8000668 <ds3231_Write>
		break;
 8001d1e:	e014      	b.n	8001d4a <update+0x96>
	case 4:
		ds3231_Write(ADDRESS_DATE, value);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	2004      	movs	r0, #4
 8001d28:	f7fe fc9e 	bl	8000668 <ds3231_Write>
		break;
 8001d2c:	e00d      	b.n	8001d4a <update+0x96>
	case 5:
		ds3231_Write(ADDRESS_MONTH, value);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	2005      	movs	r0, #5
 8001d36:	f7fe fc97 	bl	8000668 <ds3231_Write>
		break;
 8001d3a:	e006      	b.n	8001d4a <update+0x96>
	case 6:
		ds3231_Write(ADDRESS_YEAR, value);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	2006      	movs	r0, #6
 8001d44:	f7fe fc90 	bl	8000668 <ds3231_Write>
		break;
 8001d48:	bf00      	nop
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop

08001d54 <ButtonHandle>:

void ButtonHandle() {
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
    if (button_count[0] == 1) {
 8001d5a:	4b7f      	ldr	r3, [pc, #508]	; (8001f58 <ButtonHandle+0x204>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d15e      	bne.n	8001e20 <ButtonHandle+0xcc>
    	mode = (mode + 1) % 3;
 8001d62:	4b7e      	ldr	r3, [pc, #504]	; (8001f5c <ButtonHandle+0x208>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1c59      	adds	r1, r3, #1
 8001d68:	4b7d      	ldr	r3, [pc, #500]	; (8001f60 <ButtonHandle+0x20c>)
 8001d6a:	fb83 3201 	smull	r3, r2, r3, r1
 8001d6e:	17cb      	asrs	r3, r1, #31
 8001d70:	1ad2      	subs	r2, r2, r3
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	4b78      	ldr	r3, [pc, #480]	; (8001f5c <ButtonHandle+0x208>)
 8001d7c:	601a      	str	r2, [r3, #0]
    	lcd_Clear(BLACK);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7fe ffb4 	bl	8000cec <lcd_Clear>
    	if(mode == 1){
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <ButtonHandle+0x208>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d116      	bne.n	8001dba <ButtonHandle+0x66>
    	        editIndex = 0;
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <ButtonHandle+0x210>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    	        temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <ButtonHandle+0x210>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4974      	ldr	r1, [pc, #464]	; (8001f68 <ButtonHandle+0x214>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	015b      	lsls	r3, r3, #5
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <ButtonHandle+0x210>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4a6f      	ldr	r2, [pc, #444]	; (8001f6c <ButtonHandle+0x218>)
 8001db0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	        lcd_Clear(BLACK);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7fe ff99 	bl	8000cec <lcd_Clear>
    	     }
	 if(mode == 2){
 8001dba:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <ButtonHandle+0x208>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d12e      	bne.n	8001e20 <ButtonHandle+0xcc>
		 lcd_Clear(BLACK);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7fe ff92 	bl	8000cec <lcd_Clear>
		editIndex = 0;
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <ButtonHandle+0x210>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
		temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <ButtonHandle+0x210>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4965      	ldr	r1, [pc, #404]	; (8001f68 <ButtonHandle+0x214>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3308      	adds	r3, #8
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <ButtonHandle+0x210>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4a60      	ldr	r2, [pc, #384]	; (8001f6c <ButtonHandle+0x218>)
 8001dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 7; i++){
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e011      	b.n	8001e1a <ButtonHandle+0xc6>
			save_time[i] = *(dateTimeInfo[i].showName);
 8001df6:	495c      	ldr	r1, [pc, #368]	; (8001f68 <ButtonHandle+0x214>)
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	015b      	lsls	r3, r3, #5
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3308      	adds	r3, #8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <ButtonHandle+0x21c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 7; i++){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	ddea      	ble.n	8001df6 <ButtonHandle+0xa2>
		}
	 }
    }
    if(button_count[1] == 1){
 8001e20:	4b4d      	ldr	r3, [pc, #308]	; (8001f58 <ButtonHandle+0x204>)
 8001e22:	885b      	ldrh	r3, [r3, #2]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <ButtonHandle+0xe6>
    	mode = 0;
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <ButtonHandle+0x208>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
    	timeOut = 0;
 8001e2e:	4b51      	ldr	r3, [pc, #324]	; (8001f74 <ButtonHandle+0x220>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
    	lcd_Clear(BLACK);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7fe ff59 	bl	8000cec <lcd_Clear>
    }


    switch(mode){
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <ButtonHandle+0x208>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	f000 809c 	beq.w	8001f7c <ButtonHandle+0x228>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	f300 811c 	bgt.w	8002082 <ButtonHandle+0x32e>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8114 	beq.w	8002078 <ButtonHandle+0x324>
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d000      	beq.n	8001e56 <ButtonHandle+0x102>
			editIndex = (editIndex + 1) % 7;
			temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
		}
    	break;
    }
}
 8001e54:	e115      	b.n	8002082 <ButtonHandle+0x32e>
    	if(button_count[11] == 1){//change index;
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <ButtonHandle+0x204>)
 8001e58:	8adb      	ldrh	r3, [r3, #22]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d123      	bne.n	8001ea6 <ButtonHandle+0x152>
    		lcd_Clear(BLACK);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7fe ff44 	bl	8000cec <lcd_Clear>
    		editIndex = (editIndex + 1) % 7;
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <ButtonHandle+0x210>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	4b43      	ldr	r3, [pc, #268]	; (8001f78 <ButtonHandle+0x224>)
 8001e6c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e70:	4413      	add	r3, r2
 8001e72:	1099      	asrs	r1, r3, #2
 8001e74:	17d3      	asrs	r3, r2, #31
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	1a5b      	subs	r3, r3, r1
 8001e7e:	1ad1      	subs	r1, r2, r3
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <ButtonHandle+0x210>)
 8001e82:	6019      	str	r1, [r3, #0]
    		temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <ButtonHandle+0x210>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <ButtonHandle+0x214>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	015b      	lsls	r3, r3, #5
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3308      	adds	r3, #8
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <ButtonHandle+0x210>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <ButtonHandle+0x218>)
 8001ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	if(button_count[3] % 4 == 1){ //increase value
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <ButtonHandle+0x204>)
 8001ea8:	88db      	ldrh	r3, [r3, #6]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d11b      	bne.n	8001eec <ButtonHandle+0x198>
    		temp_value[editIndex] = (temp_value[editIndex] + 1);
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <ButtonHandle+0x210>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <ButtonHandle+0x218>)
 8001eba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <ButtonHandle+0x210>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3201      	adds	r2, #1
 8001ec4:	4929      	ldr	r1, [pc, #164]	; (8001f6c <ButtonHandle+0x218>)
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    		    		temp_value[editIndex] = logic_handle(editIndex, temp_value[editIndex]);
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <ButtonHandle+0x210>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <ButtonHandle+0x210>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4926      	ldr	r1, [pc, #152]	; (8001f6c <ButtonHandle+0x218>)
 8001ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <ButtonHandle+0x210>)
 8001eda:	680c      	ldr	r4, [r1, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f7ff fe44 	bl	8001b6c <logic_handle>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <ButtonHandle+0x218>)
 8001ee8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    	if(button_count[12] == 1){ //save
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <ButtonHandle+0x204>)
 8001eee:	8b1b      	ldrh	r3, [r3, #24]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	f040 80c3 	bne.w	800207c <ButtonHandle+0x328>
    		lcd_Clear(BLACK);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7fe fef8 	bl	8000cec <lcd_Clear>
    		update(editIndex, temp_value[editIndex]);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <ButtonHandle+0x210>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <ButtonHandle+0x210>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4919      	ldr	r1, [pc, #100]	; (8001f6c <ButtonHandle+0x218>)
 8001f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f7ff fed1 	bl	8001cb4 <update>
    		editIndex = (editIndex + 1) % 7;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <ButtonHandle+0x210>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <ButtonHandle+0x224>)
 8001f1a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f1e:	4413      	add	r3, r2
 8001f20:	1099      	asrs	r1, r3, #2
 8001f22:	17d3      	asrs	r3, r2, #31
 8001f24:	1ac9      	subs	r1, r1, r3
 8001f26:	460b      	mov	r3, r1
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a5b      	subs	r3, r3, r1
 8001f2c:	1ad1      	subs	r1, r2, r3
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <ButtonHandle+0x210>)
 8001f30:	6019      	str	r1, [r3, #0]
    		temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <ButtonHandle+0x210>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	490c      	ldr	r1, [pc, #48]	; (8001f68 <ButtonHandle+0x214>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	015b      	lsls	r3, r3, #5
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3308      	adds	r3, #8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <ButtonHandle+0x210>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <ButtonHandle+0x218>)
 8001f50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	break;
 8001f54:	e092      	b.n	800207c <ButtonHandle+0x328>
 8001f56:	bf00      	nop
 8001f58:	200004ac 	.word	0x200004ac
 8001f5c:	20000418 	.word	0x20000418
 8001f60:	55555556 	.word	0x55555556
 8001f64:	2000041c 	.word	0x2000041c
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2000042c 	.word	0x2000042c
 8001f70:	20000448 	.word	0x20000448
 8001f74:	20000424 	.word	0x20000424
 8001f78:	92492493 	.word	0x92492493
    	if(button_count[11] == 1){//change index;
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <ButtonHandle+0x338>)
 8001f7e:	8adb      	ldrh	r3, [r3, #22]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d123      	bne.n	8001fcc <ButtonHandle+0x278>
    		lcd_Clear(BLACK);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe feb1 	bl	8000cec <lcd_Clear>
    	    editIndex = (editIndex + 1) % 7;
 8001f8a:	4b41      	ldr	r3, [pc, #260]	; (8002090 <ButtonHandle+0x33c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <ButtonHandle+0x340>)
 8001f92:	fb83 1302 	smull	r1, r3, r3, r2
 8001f96:	4413      	add	r3, r2
 8001f98:	1099      	asrs	r1, r3, #2
 8001f9a:	17d3      	asrs	r3, r2, #31
 8001f9c:	1ac9      	subs	r1, r1, r3
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a5b      	subs	r3, r3, r1
 8001fa4:	1ad1      	subs	r1, r2, r3
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <ButtonHandle+0x33c>)
 8001fa8:	6019      	str	r1, [r3, #0]
    	    temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <ButtonHandle+0x33c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	493a      	ldr	r1, [pc, #232]	; (8002098 <ButtonHandle+0x344>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	015b      	lsls	r3, r3, #5
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3308      	adds	r3, #8
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <ButtonHandle+0x33c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4a35      	ldr	r2, [pc, #212]	; (800209c <ButtonHandle+0x348>)
 8001fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	if(button_count[3] % 4 == 1){ //increase value
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	; (800208c <ButtonHandle+0x338>)
 8001fce:	88db      	ldrh	r3, [r3, #6]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d11b      	bne.n	8002012 <ButtonHandle+0x2be>
    		temp_value[editIndex] = (temp_value[editIndex] + 1);
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <ButtonHandle+0x33c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <ButtonHandle+0x348>)
 8001fe0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <ButtonHandle+0x33c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3201      	adds	r2, #1
 8001fea:	492c      	ldr	r1, [pc, #176]	; (800209c <ButtonHandle+0x348>)
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    		    		temp_value[editIndex] = logic_handle(editIndex, temp_value[editIndex]);
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <ButtonHandle+0x33c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <ButtonHandle+0x33c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4928      	ldr	r1, [pc, #160]	; (800209c <ButtonHandle+0x348>)
 8001ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ffe:	4924      	ldr	r1, [pc, #144]	; (8002090 <ButtonHandle+0x33c>)
 8002000:	680c      	ldr	r4, [r1, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff fdb1 	bl	8001b6c <logic_handle>
 800200a:	4603      	mov	r3, r0
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <ButtonHandle+0x348>)
 800200e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		if(button_count[12] == 1){ //save
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <ButtonHandle+0x338>)
 8002014:	8b1b      	ldrh	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d132      	bne.n	8002080 <ButtonHandle+0x32c>
			lcd_Clear(BLACK);
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe fe66 	bl	8000cec <lcd_Clear>
			save_time[editIndex] = temp_value[editIndex];
 8002020:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <ButtonHandle+0x33c>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <ButtonHandle+0x33c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	491c      	ldr	r1, [pc, #112]	; (800209c <ButtonHandle+0x348>)
 800202a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800202e:	491c      	ldr	r1, [pc, #112]	; (80020a0 <ButtonHandle+0x34c>)
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			editIndex = (editIndex + 1) % 7;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <ButtonHandle+0x33c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <ButtonHandle+0x340>)
 800203c:	fb83 1302 	smull	r1, r3, r3, r2
 8002040:	4413      	add	r3, r2
 8002042:	1099      	asrs	r1, r3, #2
 8002044:	17d3      	asrs	r3, r2, #31
 8002046:	1ac9      	subs	r1, r1, r3
 8002048:	460b      	mov	r3, r1
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	1a5b      	subs	r3, r3, r1
 800204e:	1ad1      	subs	r1, r2, r3
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <ButtonHandle+0x33c>)
 8002052:	6019      	str	r1, [r3, #0]
			temp_value[editIndex] = *(dateTimeInfo[editIndex].showName);
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <ButtonHandle+0x33c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	490f      	ldr	r1, [pc, #60]	; (8002098 <ButtonHandle+0x344>)
 800205a:	4613      	mov	r3, r2
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3308      	adds	r3, #8
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <ButtonHandle+0x33c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4611      	mov	r1, r2
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <ButtonHandle+0x348>)
 8002072:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	break;
 8002076:	e003      	b.n	8002080 <ButtonHandle+0x32c>
    	break;
 8002078:	bf00      	nop
 800207a:	e002      	b.n	8002082 <ButtonHandle+0x32e>
    	break;
 800207c:	bf00      	nop
 800207e:	e000      	b.n	8002082 <ButtonHandle+0x32e>
    	break;
 8002080:	bf00      	nop
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	200004ac 	.word	0x200004ac
 8002090:	2000041c 	.word	0x2000041c
 8002094:	92492493 	.word	0x92492493
 8002098:	20000008 	.word	0x20000008
 800209c:	2000042c 	.word	0x2000042c
 80020a0:	20000448 	.word	0x20000448

080020a4 <checkTimeOut>:

void checkTimeOut(){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
	int count_temp = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 7; i++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	e015      	b.n	80020e0 <checkTimeOut+0x3c>
		if(save_time[i] == *(dateTimeInfo[i].showName)) count_temp++;
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <checkTimeOut+0x64>)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <checkTimeOut+0x68>)
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	015b      	lsls	r3, r3, #5
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4403      	add	r3, r0
 80020ca:	3308      	adds	r3, #8
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4299      	cmp	r1, r3
 80020d2:	d102      	bne.n	80020da <checkTimeOut+0x36>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3301      	adds	r3, #1
 80020d8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 7; i++){
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	dde6      	ble.n	80020b4 <checkTimeOut+0x10>
	}
	if(count_temp == 7) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d106      	bne.n	80020fa <checkTimeOut+0x56>
		lcd_Clear(BLACK);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe fdfd 	bl	8000cec <lcd_Clear>
		timeOut = 1;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <checkTimeOut+0x6c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
	}
	else timeOut = 0;
}
 80020f8:	e002      	b.n	8002100 <checkTimeOut+0x5c>
	else timeOut = 0;
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <checkTimeOut+0x6c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000448 	.word	0x20000448
 800210c:	20000008 	.word	0x20000008
 8002110:	20000424 	.word	0x20000424

08002114 <updateUart>:

int sent = 0;
int hand_state = 0;
int count_10s = 0;
int count3 = 0;
void updateUart(){
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af04      	add	r7, sp, #16
	if(hand_mode == 1){
 800211a:	4ba3      	ldr	r3, [pc, #652]	; (80023a8 <updateUart+0x294>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	f040 80e0 	bne.w	80022e4 <updateUart+0x1d0>
		ds3231_ReadTime();
 8002124:	f7fe fac2 	bl	80006ac <ds3231_ReadTime>
		displayTime();
 8002128:	f7ff fbc4 	bl	80018b4 <displayTime>
		count_10s = (count_10s + 1) % 200;
 800212c:	4b9f      	ldr	r3, [pc, #636]	; (80023ac <updateUart+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4b9f      	ldr	r3, [pc, #636]	; (80023b0 <updateUart+0x29c>)
 8002134:	fb83 1302 	smull	r1, r3, r3, r2
 8002138:	1199      	asrs	r1, r3, #6
 800213a:	17d3      	asrs	r3, r2, #31
 800213c:	1acb      	subs	r3, r1, r3
 800213e:	21c8      	movs	r1, #200	; 0xc8
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	4a99      	ldr	r2, [pc, #612]	; (80023ac <updateUart+0x298>)
 8002148:	6013      	str	r3, [r2, #0]
		if(count_10s == 0){
 800214a:	4b98      	ldr	r3, [pc, #608]	; (80023ac <updateUart+0x298>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12b      	bne.n	80021aa <updateUart+0x96>
			count3++;
 8002152:	4b98      	ldr	r3, [pc, #608]	; (80023b4 <updateUart+0x2a0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a96      	ldr	r2, [pc, #600]	; (80023b4 <updateUart+0x2a0>)
 800215a:	6013      	str	r3, [r2, #0]
			sent = 0;
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <updateUart+0x2a4>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
			if(count3 >= 3){
 8002162:	4b94      	ldr	r3, [pc, #592]	; (80023b4 <updateUart+0x2a0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	dd1f      	ble.n	80021aa <updateUart+0x96>
				lcd_Clear(BLACK);
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe fdbe 	bl	8000cec <lcd_Clear>
				lcd_ShowStr(100, 200, "ERRORS", RED, BLACK, 30, 1);
 8002170:	2301      	movs	r3, #1
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	231e      	movs	r3, #30
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002180:	4a8e      	ldr	r2, [pc, #568]	; (80023bc <updateUart+0x2a8>)
 8002182:	21c8      	movs	r1, #200	; 0xc8
 8002184:	2064      	movs	r0, #100	; 0x64
 8002186:	f7ff f8f1 	bl	800136c <lcd_ShowStr>
				hand_mode = 0;
 800218a:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <updateUart+0x294>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
				hand_state = 0;
 8002190:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <updateUart+0x2ac>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
				sent = 0;
 8002196:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <updateUart+0x2a4>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
				count3 = 0;
 800219c:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <updateUart+0x2a0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
				mode = 0;
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <updateUart+0x2b0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
				return;
 80021a8:	e1c0      	b.n	800252c <updateUart+0x418>
			}
		}
			if (!sent) {
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <updateUart+0x2a4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 8098 	bne.w	80022e4 <updateUart+0x1d0>
				 sent = 1;
 80021b4:	4b80      	ldr	r3, [pc, #512]	; (80023b8 <updateUart+0x2a4>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
				 switch(hand_state){
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <updateUart+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	f200 8092 	bhi.w	80022e8 <updateUart+0x1d4>
 80021c4:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <updateUart+0xb8>)
 80021c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ca:	bf00      	nop
 80021cc:	080021e9 	.word	0x080021e9
 80021d0:	0800220d 	.word	0x0800220d
 80021d4:	08002231 	.word	0x08002231
 80021d8:	08002255 	.word	0x08002255
 80021dc:	08002279 	.word	0x08002279
 80021e0:	0800229d 	.word	0x0800229d
 80021e4:	080022c1 	.word	0x080022c1
						case 0:
							uart_Rs232SendString("Hours\n");
 80021e8:	4877      	ldr	r0, [pc, #476]	; (80023c8 <updateUart+0x2b4>)
 80021ea:	f000 fbdf 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Hours", WHITE, RED, 24, 0);
 80021ee:	2300      	movs	r3, #0
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	2318      	movs	r3, #24
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	4a72      	ldr	r2, [pc, #456]	; (80023cc <updateUart+0x2b8>)
 8002202:	213c      	movs	r1, #60	; 0x3c
 8002204:	2014      	movs	r0, #20
 8002206:	f7ff f8b1 	bl	800136c <lcd_ShowStr>
							break;
 800220a:	e06e      	b.n	80022ea <updateUart+0x1d6>
						case 1:
							uart_Rs232SendString("Minutes\n");
 800220c:	4870      	ldr	r0, [pc, #448]	; (80023d0 <updateUart+0x2bc>)
 800220e:	f000 fbcd 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Minutes", WHITE, RED, 24, 0);
 8002212:	2300      	movs	r3, #0
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2318      	movs	r3, #24
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002224:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <updateUart+0x2c0>)
 8002226:	213c      	movs	r1, #60	; 0x3c
 8002228:	2014      	movs	r0, #20
 800222a:	f7ff f89f 	bl	800136c <lcd_ShowStr>
							break;
 800222e:	e05c      	b.n	80022ea <updateUart+0x1d6>
						case 2:
							uart_Rs232SendString("Seconds\n");
 8002230:	4869      	ldr	r0, [pc, #420]	; (80023d8 <updateUart+0x2c4>)
 8002232:	f000 fbbb 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Seconds", WHITE, RED, 24, 0);
 8002236:	2300      	movs	r3, #0
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2318      	movs	r3, #24
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	4a64      	ldr	r2, [pc, #400]	; (80023dc <updateUart+0x2c8>)
 800224a:	213c      	movs	r1, #60	; 0x3c
 800224c:	2014      	movs	r0, #20
 800224e:	f7ff f88d 	bl	800136c <lcd_ShowStr>
							break;
 8002252:	e04a      	b.n	80022ea <updateUart+0x1d6>
						case 3:
							uart_Rs232SendString("Date\n");
 8002254:	4862      	ldr	r0, [pc, #392]	; (80023e0 <updateUart+0x2cc>)
 8002256:	f000 fba9 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Date", WHITE, RED, 24, 0);
 800225a:	2300      	movs	r3, #0
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	2318      	movs	r3, #24
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226c:	4a5d      	ldr	r2, [pc, #372]	; (80023e4 <updateUart+0x2d0>)
 800226e:	213c      	movs	r1, #60	; 0x3c
 8002270:	2014      	movs	r0, #20
 8002272:	f7ff f87b 	bl	800136c <lcd_ShowStr>
							break;
 8002276:	e038      	b.n	80022ea <updateUart+0x1d6>
						case 4:
							uart_Rs232SendString("Day\n");
 8002278:	485b      	ldr	r0, [pc, #364]	; (80023e8 <updateUart+0x2d4>)
 800227a:	f000 fb97 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Day", WHITE, RED, 24, 0);
 800227e:	2300      	movs	r3, #0
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2318      	movs	r3, #24
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002290:	4a56      	ldr	r2, [pc, #344]	; (80023ec <updateUart+0x2d8>)
 8002292:	213c      	movs	r1, #60	; 0x3c
 8002294:	2014      	movs	r0, #20
 8002296:	f7ff f869 	bl	800136c <lcd_ShowStr>
							break;
 800229a:	e026      	b.n	80022ea <updateUart+0x1d6>
						case 5:
							uart_Rs232SendString("Month\n");
 800229c:	4854      	ldr	r0, [pc, #336]	; (80023f0 <updateUart+0x2dc>)
 800229e:	f000 fb85 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Month", WHITE, RED, 24, 0);
 80022a2:	2300      	movs	r3, #0
 80022a4:	9302      	str	r3, [sp, #8]
 80022a6:	2318      	movs	r3, #24
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <updateUart+0x2e0>)
 80022b6:	213c      	movs	r1, #60	; 0x3c
 80022b8:	2014      	movs	r0, #20
 80022ba:	f7ff f857 	bl	800136c <lcd_ShowStr>
							break;
 80022be:	e014      	b.n	80022ea <updateUart+0x1d6>
						case 6:
							uart_Rs232SendString("Year\n");
 80022c0:	484d      	ldr	r0, [pc, #308]	; (80023f8 <updateUart+0x2e4>)
 80022c2:	f000 fb73 	bl	80029ac <uart_Rs232SendString>
							lcd_ShowStr(20, 60, "Updating Year", WHITE, RED, 24, 0);
 80022c6:	2300      	movs	r3, #0
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	2318      	movs	r3, #24
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d8:	4a48      	ldr	r2, [pc, #288]	; (80023fc <updateUart+0x2e8>)
 80022da:	213c      	movs	r1, #60	; 0x3c
 80022dc:	2014      	movs	r0, #20
 80022de:	f7ff f845 	bl	800136c <lcd_ShowStr>
							break;
 80022e2:	e002      	b.n	80022ea <updateUart+0x1d6>
						default:
							break;
						}
			 }
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <updateUart+0x1d6>
							break;
 80022e8:	bf00      	nop
		}

		if(buffer_flag == 1){
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <updateUart+0x2ec>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 811c 	bne.w	800252c <updateUart+0x418>
			memcpy(command_data, buffer, sizeof(command_data));
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <updateUart+0x2f0>)
 80022f6:	4a44      	ldr	r2, [pc, #272]	; (8002408 <updateUart+0x2f4>)
 80022f8:	6814      	ldr	r4, [r2, #0]
 80022fa:	6850      	ldr	r0, [r2, #4]
 80022fc:	6891      	ldr	r1, [r2, #8]
 80022fe:	68d5      	ldr	r5, [r2, #12]
 8002300:	601c      	str	r4, [r3, #0]
 8002302:	6058      	str	r0, [r3, #4]
 8002304:	6099      	str	r1, [r3, #8]
 8002306:	60dd      	str	r5, [r3, #12]
 8002308:	6914      	ldr	r4, [r2, #16]
 800230a:	6950      	ldr	r0, [r2, #20]
 800230c:	6991      	ldr	r1, [r2, #24]
 800230e:	611c      	str	r4, [r3, #16]
 8002310:	6158      	str	r0, [r3, #20]
 8002312:	6199      	str	r1, [r3, #24]
 8002314:	8b92      	ldrh	r2, [r2, #28]
 8002316:	839a      	strh	r2, [r3, #28]
			if(index_buffer == 1){
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <updateUart+0x2f8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d17b      	bne.n	8002418 <updateUart+0x304>
				if(command_data[0] >='0' && command_data[0] <= '9'){
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <updateUart+0x2f0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b2f      	cmp	r3, #47	; 0x2f
 8002326:	d92e      	bls.n	8002386 <updateUart+0x272>
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <updateUart+0x2f0>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b39      	cmp	r3, #57	; 0x39
 800232e:	d82a      	bhi.n	8002386 <updateUart+0x272>
					int temp1 = command_data[0] - 48;
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <updateUart+0x2f0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	3b30      	subs	r3, #48	; 0x30
 8002336:	603b      	str	r3, [r7, #0]
					if(logic_handle1(hand_state, temp1)){
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <updateUart+0x2ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc66 	bl	8001c10 <logic_handle1>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00f      	beq.n	800236a <updateUart+0x256>
						uart_Rs232SendString("ERROR Input\n");
 800234a:	4831      	ldr	r0, [pc, #196]	; (8002410 <updateUart+0x2fc>)
 800234c:	f000 fb2e 	bl	80029ac <uart_Rs232SendString>
						buffer_flag = 0;
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <updateUart+0x2ec>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
									index_buffer = 0;
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <updateUart+0x2f8>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
									out_buffer = 0;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <updateUart+0x300>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
									sent = 0;
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <updateUart+0x2a4>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
						return;
 8002368:	e0e0      	b.n	800252c <updateUart+0x418>
					}
					else{
						temp1 = logic_handle(hand_state, temp1);
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <updateUart+0x2ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6839      	ldr	r1, [r7, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fbfb 	bl	8001b6c <logic_handle>
 8002376:	6038      	str	r0, [r7, #0]
						update(hand_state, temp1);
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <updateUart+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc98 	bl	8001cb4 <update>
				if(command_data[0] >='0' && command_data[0] <= '9'){
 8002384:	e09d      	b.n	80024c2 <updateUart+0x3ae>
					}

				}
				else {
					uart_Rs232SendString("ERROR Input\n");
 8002386:	4822      	ldr	r0, [pc, #136]	; (8002410 <updateUart+0x2fc>)
 8002388:	f000 fb10 	bl	80029ac <uart_Rs232SendString>
					buffer_flag = 0;
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <updateUart+0x2ec>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
								index_buffer = 0;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <updateUart+0x2f8>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
								out_buffer = 0;
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <updateUart+0x300>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
								sent = 0;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <updateUart+0x2a4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
					return;
 80023a4:	e0c2      	b.n	800252c <updateUart+0x418>
 80023a6:	bf00      	nop
 80023a8:	20000420 	.word	0x20000420
 80023ac:	2000046c 	.word	0x2000046c
 80023b0:	51eb851f 	.word	0x51eb851f
 80023b4:	20000470 	.word	0x20000470
 80023b8:	20000464 	.word	0x20000464
 80023bc:	08007b6c 	.word	0x08007b6c
 80023c0:	20000468 	.word	0x20000468
 80023c4:	20000418 	.word	0x20000418
 80023c8:	08007b74 	.word	0x08007b74
 80023cc:	08007b7c 	.word	0x08007b7c
 80023d0:	08007b8c 	.word	0x08007b8c
 80023d4:	08007b98 	.word	0x08007b98
 80023d8:	08007bac 	.word	0x08007bac
 80023dc:	08007bb8 	.word	0x08007bb8
 80023e0:	08007bcc 	.word	0x08007bcc
 80023e4:	08007bd4 	.word	0x08007bd4
 80023e8:	08007be4 	.word	0x08007be4
 80023ec:	08007bec 	.word	0x08007bec
 80023f0:	08007bfc 	.word	0x08007bfc
 80023f4:	08007c04 	.word	0x08007c04
 80023f8:	08007c14 	.word	0x08007c14
 80023fc:	08007c1c 	.word	0x08007c1c
 8002400:	200004a3 	.word	0x200004a3
 8002404:	200005bc 	.word	0x200005bc
 8002408:	20000744 	.word	0x20000744
 800240c:	200004a2 	.word	0x200004a2
 8002410:	08007c2c 	.word	0x08007c2c
 8002414:	200004a1 	.word	0x200004a1
				}

			}
			else {
				if(command_data[0] >= '0' && command_data[0] <= '9' && command_data[1] >= '0' && command_data[1] <= '9'){
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <updateUart+0x420>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b2f      	cmp	r3, #47	; 0x2f
 800241e:	d940      	bls.n	80024a2 <updateUart+0x38e>
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <updateUart+0x420>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b39      	cmp	r3, #57	; 0x39
 8002426:	d83c      	bhi.n	80024a2 <updateUart+0x38e>
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <updateUart+0x420>)
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b2f      	cmp	r3, #47	; 0x2f
 800242e:	d938      	bls.n	80024a2 <updateUart+0x38e>
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <updateUart+0x420>)
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	2b39      	cmp	r3, #57	; 0x39
 8002436:	d834      	bhi.n	80024a2 <updateUart+0x38e>
					int temp1 = (command_data[0]-48)*10 + command_data[1] -48;
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <updateUart+0x420>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	461a      	mov	r2, r3
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <updateUart+0x420>)
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	4413      	add	r3, r2
 8002450:	3b30      	subs	r3, #48	; 0x30
 8002452:	607b      	str	r3, [r7, #4]
					if(logic_handle1(hand_state, temp1)){
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <updateUart+0x424>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fbd8 	bl	8001c10 <logic_handle1>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00f      	beq.n	8002486 <updateUart+0x372>
						uart_Rs232SendString("ERROR Input\n");
 8002466:	4835      	ldr	r0, [pc, #212]	; (800253c <updateUart+0x428>)
 8002468:	f000 faa0 	bl	80029ac <uart_Rs232SendString>
						buffer_flag = 0;
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <updateUart+0x42c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
									index_buffer = 0;
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <updateUart+0x430>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
									out_buffer = 0;
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <updateUart+0x434>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
									sent = 0;
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <updateUart+0x438>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
						return;
 8002484:	e052      	b.n	800252c <updateUart+0x418>
					}
					else{
						temp1 = logic_handle(hand_state, temp1);
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <updateUart+0x424>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fb6d 	bl	8001b6c <logic_handle>
 8002492:	6078      	str	r0, [r7, #4]
						update(hand_state, temp1);
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <updateUart+0x424>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fc0a 	bl	8001cb4 <update>
				if(command_data[0] >= '0' && command_data[0] <= '9' && command_data[1] >= '0' && command_data[1] <= '9'){
 80024a0:	e00f      	b.n	80024c2 <updateUart+0x3ae>
					}
				}
				else {
					uart_Rs232SendString("ERROR Input\n");
 80024a2:	4826      	ldr	r0, [pc, #152]	; (800253c <updateUart+0x428>)
 80024a4:	f000 fa82 	bl	80029ac <uart_Rs232SendString>
					buffer_flag = 0;
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <updateUart+0x42c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
								index_buffer = 0;
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <updateUart+0x430>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
								out_buffer = 0;
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <updateUart+0x434>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
								sent = 0;
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <updateUart+0x438>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
					return;
 80024c0:	e034      	b.n	800252c <updateUart+0x418>
				}
			}
			count3 = 0;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <updateUart+0x43c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <updateUart+0x42c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
			index_buffer = 0;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <updateUart+0x430>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
			out_buffer = 0;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <updateUart+0x434>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
			sent = 0;
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <updateUart+0x438>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
			if(hand_state == 6) {
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <updateUart+0x424>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b06      	cmp	r3, #6
 80024e6:	d105      	bne.n	80024f4 <updateUart+0x3e0>
				hand_mode = 0;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <updateUart+0x440>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
				mode = 0;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <updateUart+0x444>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
			}
			hand_state = (hand_state + 1) % 7;
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <updateUart+0x424>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <updateUart+0x448>)
 80024fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002500:	4413      	add	r3, r2
 8002502:	1099      	asrs	r1, r3, #2
 8002504:	17d3      	asrs	r3, r2, #31
 8002506:	1ac9      	subs	r1, r1, r3
 8002508:	460b      	mov	r3, r1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a5b      	subs	r3, r3, r1
 800250e:	1ad1      	subs	r1, r2, r3
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <updateUart+0x424>)
 8002512:	6019      	str	r1, [r3, #0]
			lcd_ShowStr(20, 60, "Updating AAAAAAAAAAA", BLACK, BLACK, 24, 0);
 8002514:	2300      	movs	r3, #0
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	2318      	movs	r3, #24
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <updateUart+0x44c>)
 8002524:	213c      	movs	r1, #60	; 0x3c
 8002526:	2014      	movs	r0, #20
 8002528:	f7fe ff20 	bl	800136c <lcd_ShowStr>
		}

}
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	200005bc 	.word	0x200005bc
 8002538:	20000468 	.word	0x20000468
 800253c:	08007c2c 	.word	0x08007c2c
 8002540:	200004a3 	.word	0x200004a3
 8002544:	200004a2 	.word	0x200004a2
 8002548:	200004a1 	.word	0x200004a1
 800254c:	20000464 	.word	0x20000464
 8002550:	20000470 	.word	0x20000470
 8002554:	20000420 	.word	0x20000420
 8002558:	20000418 	.word	0x20000418
 800255c:	92492493 	.word	0x92492493
 8002560:	08007c3c 	.word	0x08007c3c

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800256c:	e7fe      	b.n	800256c <Error_Handler+0x8>
	...

08002570 <timer_init>:

uint16_t flag_timer[10] = {0};
uint16_t timer_counter[10] = {0};
uint16_t timer_MUL[10] = {10};

void timer_init(){
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <timer_init+0x10>)
 8002576:	f003 f9b5 	bl	80058e4 <HAL_TIM_Base_Start_IT>
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000698 	.word	0x20000698

08002584 <setTimer>:

void setTimer(uint16_t duration, uint16_t index){
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	460a      	mov	r2, r1
 800258e:	80fb      	strh	r3, [r7, #6]
 8002590:	4613      	mov	r3, r2
 8002592:	80bb      	strh	r3, [r7, #4]
	timer_MUL[index] = duration/TIMER_CYCLE_2;
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	490b      	ldr	r1, [pc, #44]	; (80025c4 <setTimer+0x40>)
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer_counter[index] = timer_MUL[index];
 800259e:	88ba      	ldrh	r2, [r7, #4]
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <setTimer+0x40>)
 80025a4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <setTimer+0x44>)
 80025aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[index] = 0;
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <setTimer+0x48>)
 80025b2:	2100      	movs	r1, #0
 80025b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	2000036c 	.word	0x2000036c
 80025c8:	20000488 	.word	0x20000488
 80025cc:	20000474 	.word	0x20000474

080025d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d12d      	bne.n	800263e <HAL_TIM_PeriodElapsedCallback+0x6e>
		for (int i = 0; i < 10; i++){
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e025      	b.n	8002634 <HAL_TIM_PeriodElapsedCallback+0x64>
			if(timer_counter[i] > 0){
 80025e8:	4a17      	ldr	r2, [pc, #92]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01c      	beq.n	800262e <HAL_TIM_PeriodElapsedCallback+0x5e>
				timer_counter[i]--;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b299      	uxth	r1, r3
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(timer_counter[i] == 0){
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10c      	bne.n	800262e <HAL_TIM_PeriodElapsedCallback+0x5e>
					flag_timer[i] = 1;
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2101      	movs	r1, #1
 800261a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					timer_counter[i] = timer_MUL[i];
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 10; i++){
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3301      	adds	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b09      	cmp	r3, #9
 8002638:	ddd6      	ble.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}
		led7_Scan();
 800263a:	f7fe ff39 	bl	80014b0 <led7_Scan>
	}
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000488 	.word	0x20000488
 800264c:	20000474 	.word	0x20000474
 8002650:	2000036c 	.word	0x2000036c

08002654 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <MX_SPI1_Init+0x64>)
 800265a:	4a18      	ldr	r2, [pc, #96]	; (80026bc <MX_SPI1_Init+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_SPI1_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_SPI1_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002688:	2200      	movs	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <MX_SPI1_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_SPI1_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <MX_SPI1_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_SPI1_Init+0x64>)
 80026a0:	220a      	movs	r2, #10
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <MX_SPI1_Init+0x64>)
 80026a6:	f002 fae1 	bl	8004c6c <HAL_SPI_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026b0:	f7ff ff58 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000640 	.word	0x20000640
 80026bc:	40013000 	.word	0x40013000

080026c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_SPI_MspInit+0x84>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12b      	bne.n	800273a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800271a:	2338      	movs	r3, #56	; 0x38
 800271c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002726:	2303      	movs	r3, #3
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272a:	2305      	movs	r3, #5
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	; (800274c <HAL_SPI_MspInit+0x8c>)
 8002736:	f000 fcaf 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40013000 	.word	0x40013000
 8002748:	40023800 	.word	0x40023800
 800274c:	40020400 	.word	0x40020400

08002750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_MspInit+0x4c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_MspInit+0x4c>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_MspInit+0x4c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_MspInit+0x4c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <HAL_MspInit+0x4c>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_MspInit+0x4c>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <NMI_Handler+0x4>

080027a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler+0x4>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler+0x4>

080027be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f000 fa6c 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM2_IRQHandler+0x10>)
 80027fa:	f003 f8e3 	bl	80059c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000698 	.word	0x20000698

08002808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <USART1_IRQHandler+0x10>)
 800280e:	f003 fdab 	bl	8006368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000764 	.word	0x20000764

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f004 fd14 	bl	8007278 <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	220c      	movs	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20020000 	.word	0x20020000
 800287c:	00000400 	.word	0x00000400
 8002880:	2000049c 	.word	0x2000049c
 8002884:	200007c0 	.word	0x200007c0

08002888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <SystemInit+0x20>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <SystemInit+0x20>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c0:	463b      	mov	r3, r7
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_TIM2_Init+0x94>)
 80028ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <MX_TIM2_Init+0x94>)
 80028d2:	f240 3247 	movw	r2, #839	; 0x347
 80028d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_TIM2_Init+0x94>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_TIM2_Init+0x94>)
 80028e0:	2263      	movs	r2, #99	; 0x63
 80028e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_TIM2_Init+0x94>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <MX_TIM2_Init+0x94>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028f0:	4813      	ldr	r0, [pc, #76]	; (8002940 <MX_TIM2_Init+0x94>)
 80028f2:	f002 ffa7 	bl	8005844 <HAL_TIM_Base_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028fc:	f7ff fe32 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	4619      	mov	r1, r3
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <MX_TIM2_Init+0x94>)
 800290e:	f003 f961 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002918:	f7ff fe24 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_TIM2_Init+0x94>)
 800292a:	f003 fb7d 	bl	8006028 <HAL_TIMEx_MasterConfigSynchronization>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002934:	f7ff fe16 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000698 	.word	0x20000698

08002944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d115      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_TIM_Base_MspInit+0x48>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <HAL_TIM_Base_MspInit+0x48>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_TIM_Base_MspInit+0x48>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	201c      	movs	r0, #28
 8002978:	f000 fac5 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800297c:	201c      	movs	r0, #28
 800297e:	f000 fade 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <uart_init_rs232>:
uint8_t temp = 0;
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
uint8_t buffer[MAX_BUFFER_SIZE];

void uart_init_rs232(){
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002994:	2201      	movs	r2, #1
 8002996:	4903      	ldr	r1, [pc, #12]	; (80029a4 <uart_init_rs232+0x14>)
 8002998:	4803      	ldr	r0, [pc, #12]	; (80029a8 <uart_init_rs232+0x18>)
 800299a:	f003 fcb4 	bl	8006306 <HAL_UART_Receive_IT>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200004a0 	.word	0x200004a0
 80029a8:	20000764 	.word	0x20000764

080029ac <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <uart_Rs232SendString+0x28>)
 80029b8:	4807      	ldr	r0, [pc, #28]	; (80029d8 <uart_Rs232SendString+0x2c>)
 80029ba:	f004 fc8f 	bl	80072dc <siprintf>
 80029be:	4603      	mov	r3, r0
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	230a      	movs	r3, #10
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <uart_Rs232SendString+0x2c>)
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <uart_Rs232SendString+0x30>)
 80029c8:	f003 fc0b 	bl	80061e2 <HAL_UART_Transmit>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	08007c54 	.word	0x08007c54
 80029d8:	200006e0 	.word	0x200006e0
 80029dc:	20000764 	.word	0x20000764

080029e0 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <HAL_UART_RxCpltCallback+0x64>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d124      	bne.n	8002a3c <HAL_UART_RxCpltCallback+0x5c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 50);
 80029f2:	2332      	movs	r3, #50	; 0x32
 80029f4:	2201      	movs	r2, #1
 80029f6:	4914      	ldr	r1, [pc, #80]	; (8002a48 <HAL_UART_RxCpltCallback+0x68>)
 80029f8:	4814      	ldr	r0, [pc, #80]	; (8002a4c <HAL_UART_RxCpltCallback+0x6c>)
 80029fa:	f003 fbf2 	bl	80061e2 <HAL_UART_Transmit>
		if(!out_buffer){
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_UART_RxCpltCallback+0x70>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_UART_RxCpltCallback+0x52>
			buffer[index_buffer++] = receive_buffer1;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	b2d1      	uxtb	r1, r2
 8002a0e:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 8002a10:	7011      	strb	r1, [r2, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_UART_RxCpltCallback+0x68>)
 8002a16:	7819      	ldrb	r1, [r3, #0]
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_UART_RxCpltCallback+0x78>)
 8002a1a:	5499      	strb	r1, [r3, r2]
			if (index_buffer >= 2){
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_UART_RxCpltCallback+0x74>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d903      	bls.n	8002a2c <HAL_UART_RxCpltCallback+0x4c>
				out_buffer = 1;
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <HAL_UART_RxCpltCallback+0x70>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e002      	b.n	8002a32 <HAL_UART_RxCpltCallback+0x52>
			}
			else buffer_flag = 1;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_UART_RxCpltCallback+0x7c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
		}


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002a32:	2201      	movs	r2, #1
 8002a34:	4904      	ldr	r1, [pc, #16]	; (8002a48 <HAL_UART_RxCpltCallback+0x68>)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_UART_RxCpltCallback+0x6c>)
 8002a38:	f003 fc65 	bl	8006306 <HAL_UART_Receive_IT>
	}
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40011000 	.word	0x40011000
 8002a48:	200004a0 	.word	0x200004a0
 8002a4c:	20000764 	.word	0x20000764
 8002a50:	200004a1 	.word	0x200004a1
 8002a54:	200004a2 	.word	0x200004a2
 8002a58:	20000744 	.word	0x20000744
 8002a5c:	200004a3 	.word	0x200004a3

08002a60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_USART1_UART_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART1_UART_Init+0x4c>)
 8002a98:	f003 fb56 	bl	8006148 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aa2:	f7ff fd5f 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000764 	.word	0x20000764
 8002ab0:	40011000 	.word	0x40011000

08002ab4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <HAL_UART_MspInit+0x94>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d134      	bne.n	8002b40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_UART_MspInit+0x98>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b20:	2307      	movs	r3, #7
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4809      	ldr	r0, [pc, #36]	; (8002b50 <HAL_UART_MspInit+0x9c>)
 8002b2c:	f000 fab4 	bl	8003098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	2025      	movs	r0, #37	; 0x25
 8002b36:	f000 f9e6 	bl	8002f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b3a:	2025      	movs	r0, #37	; 0x25
 8002b3c:	f000 f9ff 	bl	8002f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b40:	bf00      	nop
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000

08002b54 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	0092      	lsls	r2, r2, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	b2db      	uxtb	r3, r3
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <DEC2BCD+0x44>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	08db      	lsrs	r3, r3, #3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	b258      	sxtb	r0, r3
 8002ba2:	79fa      	ldrb	r2, [r7, #7]
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <DEC2BCD+0x44>)
 8002ba6:	fba3 1302 	umull	r1, r3, r3, r2
 8002baa:	08d9      	lsrs	r1, r3, #3
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	4303      	orrs	r3, r0
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	cccccccd 	.word	0xcccccccd

08002bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bec:	4c0b      	ldr	r4, [pc, #44]	; (8002c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfa:	f7ff fe45 	bl	8002888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f004 fb41 	bl	8007284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c02:	f7fe fce1 	bl	80015c8 <main>
  bx  lr    
 8002c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c10:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 8002c14:	0800ac44 	.word	0x0800ac44
  ldr r2, =_sbss
 8002c18:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 8002c1c:	200007bc 	.word	0x200007bc

08002c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_Init+0x40>)
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_Init+0x40>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x40>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 f94f 	bl	8002ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	200f      	movs	r0, #15
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fd7a 	bl	8002750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f967 	bl	8002f5a <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f000 f92f 	bl	8002f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000380 	.word	0x20000380
 8002cc0:	20000388 	.word	0x20000388
 8002cc4:	20000384 	.word	0x20000384

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000388 	.word	0x20000388
 8002cec:	200007a8 	.word	0x200007a8

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	200007a8 	.word	0x200007a8

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000388 	.word	0x20000388

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	; (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	; (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ebc:	d301      	bcc.n	8002ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <SysTick_Config+0x40>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eca:	210f      	movs	r1, #15
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f7ff ff8e 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <SysTick_Config+0x40>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eda:	4b04      	ldr	r3, [pc, #16]	; (8002eec <SysTick_Config+0x40>)
 8002edc:	2207      	movs	r2, #7
 8002ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	e000e010 	.word	0xe000e010

08002ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff29 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f18:	f7ff ff3e 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6978      	ldr	r0, [r7, #20]
 8002f24:	f7ff ff8e 	bl	8002e44 <NVIC_EncodePriority>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff5d 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f36:	bf00      	nop
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff31 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffa2 	bl	8002eac <SysTick_Config>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff feb6 	bl	8002cf0 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d008      	beq.n	8002fa4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e052      	b.n	800304a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0216 	bic.w	r2, r2, #22
 8002fb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <HAL_DMA_Abort+0x62>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0208 	bic.w	r2, r2, #8
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	e013      	b.n	800301e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff6:	f7ff fe7b 	bl	8002cf0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d90c      	bls.n	800301e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e015      	b.n	800304a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e4      	bne.n	8002ff6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	223f      	movs	r2, #63	; 0x3f
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d004      	beq.n	8003070 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e00c      	b.n	800308a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2205      	movs	r2, #5
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e16b      	b.n	800338c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f040 815a 	bne.w	8003386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d005      	beq.n	80030ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d130      	bne.n	800314c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 0201 	and.w	r2, r3, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b03      	cmp	r3, #3
 8003156:	d017      	beq.n	8003188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d123      	bne.n	80031dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	220f      	movs	r2, #15
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	08da      	lsrs	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3208      	adds	r2, #8
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2203      	movs	r2, #3
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80b4 	beq.w	8003386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <HAL_GPIO_Init+0x30c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a5f      	ldr	r2, [pc, #380]	; (80033a4 <HAL_GPIO_Init+0x30c>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <HAL_GPIO_Init+0x30c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_GPIO_Init+0x310>)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a52      	ldr	r2, [pc, #328]	; (80033ac <HAL_GPIO_Init+0x314>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_Init+0x226>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a51      	ldr	r2, [pc, #324]	; (80033b0 <HAL_GPIO_Init+0x318>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x222>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a50      	ldr	r2, [pc, #320]	; (80033b4 <HAL_GPIO_Init+0x31c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x21e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4f      	ldr	r2, [pc, #316]	; (80033b8 <HAL_GPIO_Init+0x320>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x21a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <HAL_GPIO_Init+0x324>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x216>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_GPIO_Init+0x328>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x212>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4c      	ldr	r2, [pc, #304]	; (80033c4 <HAL_GPIO_Init+0x32c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_GPIO_Init+0x330>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x20a>
 800329e:	2307      	movs	r3, #7
 80032a0:	e00e      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032a2:	2308      	movs	r3, #8
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032a6:	2306      	movs	r3, #6
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x228>
 80032be:	2300      	movs	r3, #0
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d0:	4935      	ldr	r1, [pc, #212]	; (80033a8 <HAL_GPIO_Init+0x310>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_GPIO_Init+0x334>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_GPIO_Init+0x334>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <HAL_GPIO_Init+0x334>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_GPIO_Init+0x334>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_GPIO_Init+0x334>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	f67f ae90 	bls.w	80030b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40013800 	.word	0x40013800
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020c00 	.word	0x40020c00
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40021400 	.word	0x40021400
 80033c4:	40021800 	.word	0x40021800
 80033c8:	40021c00 	.word	0x40021c00
 80033cc:	40013c00 	.word	0x40013c00

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033ec:	e003      	b.n	80033f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	041a      	lsls	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	619a      	str	r2, [r3, #24]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e12b      	b.n	800366e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fd fb98 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003468:	f001 fbd8 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800346c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a81      	ldr	r2, [pc, #516]	; (8003678 <HAL_I2C_Init+0x274>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d807      	bhi.n	8003488 <HAL_I2C_Init+0x84>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a80      	ldr	r2, [pc, #512]	; (800367c <HAL_I2C_Init+0x278>)
 800347c:	4293      	cmp	r3, r2
 800347e:	bf94      	ite	ls
 8003480:	2301      	movls	r3, #1
 8003482:	2300      	movhi	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e006      	b.n	8003496 <HAL_I2C_Init+0x92>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a7d      	ldr	r2, [pc, #500]	; (8003680 <HAL_I2C_Init+0x27c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	bf94      	ite	ls
 8003490:	2301      	movls	r3, #1
 8003492:	2300      	movhi	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0e7      	b.n	800366e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a78      	ldr	r2, [pc, #480]	; (8003684 <HAL_I2C_Init+0x280>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0c9b      	lsrs	r3, r3, #18
 80034a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a6a      	ldr	r2, [pc, #424]	; (8003678 <HAL_I2C_Init+0x274>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d802      	bhi.n	80034d8 <HAL_I2C_Init+0xd4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3301      	adds	r3, #1
 80034d6:	e009      	b.n	80034ec <HAL_I2C_Init+0xe8>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	4a69      	ldr	r2, [pc, #420]	; (8003688 <HAL_I2C_Init+0x284>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	3301      	adds	r3, #1
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6812      	ldr	r2, [r2, #0]
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	495c      	ldr	r1, [pc, #368]	; (8003678 <HAL_I2C_Init+0x274>)
 8003508:	428b      	cmp	r3, r1
 800350a:	d819      	bhi.n	8003540 <HAL_I2C_Init+0x13c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e59      	subs	r1, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fbb1 f3f3 	udiv	r3, r1, r3
 800351a:	1c59      	adds	r1, r3, #1
 800351c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003520:	400b      	ands	r3, r1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_I2C_Init+0x138>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e59      	subs	r1, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fbb1 f3f3 	udiv	r3, r1, r3
 8003534:	3301      	adds	r3, #1
 8003536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353a:	e051      	b.n	80035e0 <HAL_I2C_Init+0x1dc>
 800353c:	2304      	movs	r3, #4
 800353e:	e04f      	b.n	80035e0 <HAL_I2C_Init+0x1dc>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d111      	bne.n	800356c <HAL_I2C_Init+0x168>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1e58      	subs	r0, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e012      	b.n	8003592 <HAL_I2C_Init+0x18e>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e58      	subs	r0, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	0099      	lsls	r1, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003582:	3301      	adds	r3, #1
 8003584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Init+0x196>
 8003596:	2301      	movs	r3, #1
 8003598:	e022      	b.n	80035e0 <HAL_I2C_Init+0x1dc>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10e      	bne.n	80035c0 <HAL_I2C_Init+0x1bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1e58      	subs	r0, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	440b      	add	r3, r1
 80035b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035be:	e00f      	b.n	80035e0 <HAL_I2C_Init+0x1dc>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	6809      	ldr	r1, [r1, #0]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800360e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6911      	ldr	r1, [r2, #16]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68d2      	ldr	r2, [r2, #12]
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	430b      	orrs	r3, r1
 8003622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	000186a0 	.word	0x000186a0
 800367c:	001e847f 	.word	0x001e847f
 8003680:	003d08ff 	.word	0x003d08ff
 8003684:	431bde83 	.word	0x431bde83
 8003688:	10624dd3 	.word	0x10624dd3

0800368c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a6:	f7ff fb23 	bl	8002cf0 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	f040 80d9 	bne.w	800386c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2319      	movs	r3, #25
 80036c0:	2201      	movs	r2, #1
 80036c2:	496d      	ldr	r1, [pc, #436]	; (8003878 <HAL_I2C_Mem_Write+0x1ec>)
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fc7f 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	e0cc      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Mem_Write+0x56>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0c5      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d007      	beq.n	8003708 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2221      	movs	r2, #33	; 0x21
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2240      	movs	r2, #64	; 0x40
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a4d      	ldr	r2, [pc, #308]	; (800387c <HAL_I2C_Mem_Write+0x1f0>)
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374a:	88f8      	ldrh	r0, [r7, #6]
 800374c:	893a      	ldrh	r2, [r7, #8]
 800374e:	8979      	ldrh	r1, [r7, #10]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4603      	mov	r3, r0
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fab6 	bl	8003ccc <I2C_RequestMemoryWrite>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d052      	beq.n	800380c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e081      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fd00 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b04      	cmp	r3, #4
 8003780:	d107      	bne.n	8003792 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e06b      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11b      	bne.n	800380c <HAL_I2C_Mem_Write+0x180>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1aa      	bne.n	800376a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 fcec 	bl	80041f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b04      	cmp	r3, #4
 800382a:	d107      	bne.n	800383c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e016      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	00100002 	.word	0x00100002
 800387c:	ffff0000 	.word	0xffff0000

08003880 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	4608      	mov	r0, r1
 800388a:	4611      	mov	r1, r2
 800388c:	461a      	mov	r2, r3
 800388e:	4603      	mov	r3, r0
 8003890:	817b      	strh	r3, [r7, #10]
 8003892:	460b      	mov	r3, r1
 8003894:	813b      	strh	r3, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800389a:	f7ff fa29 	bl	8002cf0 <HAL_GetTick>
 800389e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	f040 8208 	bne.w	8003cbe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2319      	movs	r3, #25
 80038b4:	2201      	movs	r2, #1
 80038b6:	497b      	ldr	r1, [pc, #492]	; (8003aa4 <HAL_I2C_Mem_Read+0x224>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb85 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	e1fb      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x56>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e1f4      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d007      	beq.n	80038fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2222      	movs	r2, #34	; 0x22
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a5b      	ldr	r2, [pc, #364]	; (8003aa8 <HAL_I2C_Mem_Read+0x228>)
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800393e:	88f8      	ldrh	r0, [r7, #6]
 8003940:	893a      	ldrh	r2, [r7, #8]
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4603      	mov	r3, r0
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa52 	bl	8003df8 <I2C_RequestMemoryRead>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1b0      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	623b      	str	r3, [r7, #32]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	623b      	str	r3, [r7, #32]
 800397a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e184      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	2b01      	cmp	r3, #1
 8003994:	d11b      	bne.n	80039ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e164      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d11b      	bne.n	8003a0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	e144      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a24:	e138      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	f200 80f1 	bhi.w	8003c12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d123      	bne.n	8003a80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fc1b 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e139      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a7e:	e10b      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d14e      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <HAL_I2C_Mem_Read+0x22c>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fa98 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e10e      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
 8003aa2:	bf00      	nop
 8003aa4:	00100002 	.word	0x00100002
 8003aa8:	ffff0000 	.word	0xffff0000
 8003aac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b24:	e0b8      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4966      	ldr	r1, [pc, #408]	; (8003cc8 <HAL_I2C_Mem_Read+0x448>)
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fa49 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0bf      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2200      	movs	r2, #0
 8003b8a:	494f      	ldr	r1, [pc, #316]	; (8003cc8 <HAL_I2C_Mem_Read+0x448>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fa1b 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e091      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c10:	e042      	b.n	8003c98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fb2e 	bl	8004278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e04c      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d118      	bne.n	8003c98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f aec2 	bne.w	8003a26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00010004 	.word	0x00010004

08003ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f960 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d103      	bne.n	8003d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e05f      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	492d      	ldr	r1, [pc, #180]	; (8003df4 <I2C_RequestMemoryWrite+0x128>)
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f998 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e04c      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	6a39      	ldr	r1, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa02 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d107      	bne.n	8003d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e02b      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
 8003da2:	e021      	b.n	8003de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	0a1b      	lsrs	r3, r3, #8
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9dc 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d107      	bne.n	8003dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e005      	b.n	8003dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	00010002 	.word	0x00010002

08003df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f8c2 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d103      	bne.n	8003e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0aa      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e66:	897b      	ldrh	r3, [r7, #10]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	4952      	ldr	r1, [pc, #328]	; (8003fc4 <I2C_RequestMemoryRead+0x1cc>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f8fa 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e097      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f964 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e076      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]
 8003ede:	e021      	b.n	8003f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	6a39      	ldr	r1, [r7, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f93e 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d107      	bne.n	8003f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e050      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1a:	893b      	ldrh	r3, [r7, #8]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f923 	bl	8004174 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e035      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f82b 	bl	8003fc8 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00d      	beq.n	8003f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f86:	d103      	bne.n	8003f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e013      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f94:	897b      	ldrh	r3, [r7, #10]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	6a3a      	ldr	r2, [r7, #32]
 8003fa8:	4906      	ldr	r1, [pc, #24]	; (8003fc4 <I2C_RequestMemoryRead+0x1cc>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f863 	bl	8004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	00010002 	.word	0x00010002

08003fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd8:	e025      	b.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d021      	beq.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fe fe85 	bl	8002cf0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e023      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10d      	bne.n	800404c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	e00c      	b.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	429a      	cmp	r2, r3
 800406a:	d0b6      	beq.n	8003fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004084:	e051      	b.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d123      	bne.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f043 0204 	orr.w	r2, r3, #4
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e046      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d021      	beq.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fe fe03 	bl	8002cf0 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d116      	bne.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e020      	b.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10c      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e00b      	b.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d18d      	bne.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004180:	e02d      	b.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8ce 	bl	8004324 <I2C_IsAcknowledgeFailed>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e02d      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d021      	beq.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fda9 	bl	8002cf0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e007      	b.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b80      	cmp	r3, #128	; 0x80
 80041ea:	d1ca      	bne.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004202:	e02d      	b.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f88d 	bl	8004324 <I2C_IsAcknowledgeFailed>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e02d      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d021      	beq.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe fd68 	bl	8002cf0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d1ca      	bne.n	8004204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004284:	e042      	b.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b10      	cmp	r3, #16
 8004292:	d119      	bne.n	80042c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0210 	mvn.w	r2, #16
 800429c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e029      	b.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c8:	f7fe fd12 	bl	8002cf0 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d116      	bne.n	800430c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e007      	b.n	800431c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d1b5      	bne.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d11b      	bne.n	8004374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0204 	orr.w	r2, r3, #4
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e264      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d075      	beq.n	800448e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	4ba3      	ldr	r3, [pc, #652]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d112      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b9d      	ldr	r3, [pc, #628]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	4b99      	ldr	r3, [pc, #612]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05b      	beq.n	800448c <HAL_RCC_OscConfig+0x108>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d157      	bne.n	800448c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e23f      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x74>
 80043ea:	4b91      	ldr	r3, [pc, #580]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a90      	ldr	r2, [pc, #576]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b8b      	ldr	r3, [pc, #556]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a8a      	ldr	r2, [pc, #552]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a87      	ldr	r2, [pc, #540]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 800441c:	4b84      	ldr	r3, [pc, #528]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a83      	ldr	r2, [pc, #524]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a80      	ldr	r2, [pc, #512]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fe fc58 	bl	8002cf0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7fe fc54 	bl	8002cf0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e204      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xc0>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe fc44 	bl	8002cf0 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446c:	f7fe fc40 	bl	8002cf0 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1f0      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b6c      	ldr	r3, [pc, #432]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0xe8>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b62      	ldr	r3, [pc, #392]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1c4      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4952      	ldr	r1, [pc, #328]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b4f      	ldr	r3, [pc, #316]	; (8004634 <HAL_RCC_OscConfig+0x2b0>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fe fbf9 	bl	8002cf0 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7fe fbf5 	bl	8002cf0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1a5      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4940      	ldr	r1, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <HAL_RCC_OscConfig+0x2b0>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fe fbd8 	bl	8002cf0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004544:	f7fe fbd4 	bl	8002cf0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e184      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d030      	beq.n	80045d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCC_OscConfig+0x2b4>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fe fbb8 	bl	8002cf0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004584:	f7fe fbb4 	bl	8002cf0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e164      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x200>
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x2b4>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fe fba1 	bl	8002cf0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b2:	f7fe fb9d 	bl	8002cf0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e14d      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a0 	beq.w	800471e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fe fb63 	bl	8002cf0 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e011      	b.n	8004652 <HAL_RCC_OscConfig+0x2ce>
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	42470000 	.word	0x42470000
 8004638:	42470e80 	.word	0x42470e80
 800463c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fe fb56 	bl	8002cf0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e106      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004652:	4b85      	ldr	r3, [pc, #532]	; (8004868 <HAL_RCC_OscConfig+0x4e4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d106      	bne.n	8004674 <HAL_RCC_OscConfig+0x2f0>
 8004666:	4b81      	ldr	r3, [pc, #516]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a80      	ldr	r2, [pc, #512]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	e01c      	b.n	80046ae <HAL_RCC_OscConfig+0x32a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d10c      	bne.n	8004696 <HAL_RCC_OscConfig+0x312>
 800467c:	4b7b      	ldr	r3, [pc, #492]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a7a      	ldr	r2, [pc, #488]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a77      	ldr	r2, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	e00b      	b.n	80046ae <HAL_RCC_OscConfig+0x32a>
 8004696:	4b75      	ldr	r3, [pc, #468]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a74      	ldr	r2, [pc, #464]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	4b72      	ldr	r3, [pc, #456]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a71      	ldr	r2, [pc, #452]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe fb1b 	bl	8002cf0 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fe fb17 	bl	8002cf0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0c5      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCC_OscConfig+0x33a>
 80046e0:	e014      	b.n	800470c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7fe fb05 	bl	8002cf0 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe fb01 	bl	8002cf0 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0af      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	4b5a      	ldr	r3, [pc, #360]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ee      	bne.n	80046ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a55      	ldr	r2, [pc, #340]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 809b 	beq.w	800485e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d05c      	beq.n	80047ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d141      	bne.n	80047c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <HAL_RCC_OscConfig+0x4ec>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fe fad5 	bl	8002cf0 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474a:	f7fe fad1 	bl	8002cf0 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e081      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	019b      	lsls	r3, r3, #6
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	4937      	ldr	r1, [pc, #220]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004792:	4b37      	ldr	r3, [pc, #220]	; (8004870 <HAL_RCC_OscConfig+0x4ec>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe faaa 	bl	8002cf0 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fe faa6 	bl	8002cf0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e056      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x41c>
 80047be:	e04e      	b.n	800485e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x4ec>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fe fa93 	bl	8002cf0 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fe fa8f 	bl	8002cf0 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e03f      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x44a>
 80047ec:	e037      	b.n	800485e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e032      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <HAL_RCC_OscConfig+0x4e8>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d028      	beq.n	800485a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d121      	bne.n	800485a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d11a      	bne.n	800485a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800482a:	4013      	ands	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004830:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d107      	bne.n	800485a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40007000 	.word	0x40007000
 800486c:	40023800 	.word	0x40023800
 8004870:	42470060 	.word	0x42470060

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0cc      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90c      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d044      	beq.n	8004994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d119      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e067      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004964:	f7fe f9c4 	bl	8002cf0 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fe f9c0 	bl	8002cf0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20c      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	490a      	ldr	r1, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	5ccb      	ldrb	r3, [r1, r3]
 8004a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe f924 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	0800abe8 	.word	0x0800abe8
 8004a38:	20000380 	.word	0x20000380
 8004a3c:	20000384 	.word	0x20000384

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	607b      	str	r3, [r7, #4]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	2300      	movs	r3, #0
 8004a52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a58:	4b67      	ldr	r3, [pc, #412]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x40>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	f200 80bd 	bhi.w	8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a72:	e0b7      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a76:	60bb      	str	r3, [r7, #8]
       break;
 8004a78:	e0b7      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a7c:	60bb      	str	r3, [r7, #8]
      break;
 8004a7e:	e0b4      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a80:	4b5d      	ldr	r3, [pc, #372]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a8a:	4b5b      	ldr	r3, [pc, #364]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d04d      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a96:	4b58      	ldr	r3, [pc, #352]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	ea02 0800 	and.w	r8, r2, r0
 8004aae:	ea03 0901 	and.w	r9, r3, r1
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	014b      	lsls	r3, r1, #5
 8004ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ac4:	0142      	lsls	r2, r0, #5
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	ebb0 0008 	subs.w	r0, r0, r8
 8004ace:	eb61 0109 	sbc.w	r1, r1, r9
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	018b      	lsls	r3, r1, #6
 8004adc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ae0:	0182      	lsls	r2, r0, #6
 8004ae2:	1a12      	subs	r2, r2, r0
 8004ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae8:	f04f 0000 	mov.w	r0, #0
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	00d9      	lsls	r1, r3, #3
 8004af2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004af6:	00d0      	lsls	r0, r2, #3
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	eb12 0208 	adds.w	r2, r2, r8
 8004b00:	eb43 0309 	adc.w	r3, r3, r9
 8004b04:	f04f 0000 	mov.w	r0, #0
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	0259      	lsls	r1, r3, #9
 8004b0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b12:	0250      	lsls	r0, r2, #9
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	f7fb fbac 	bl	8000280 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e04a      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b42:	f04f 0100 	mov.w	r1, #0
 8004b46:	ea02 0400 	and.w	r4, r2, r0
 8004b4a:	ea03 0501 	and.w	r5, r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	014b      	lsls	r3, r1, #5
 8004b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b60:	0142      	lsls	r2, r0, #5
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	1b00      	subs	r0, r0, r4
 8004b68:	eb61 0105 	sbc.w	r1, r1, r5
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	018b      	lsls	r3, r1, #6
 8004b76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b7a:	0182      	lsls	r2, r0, #6
 8004b7c:	1a12      	subs	r2, r2, r0
 8004b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	00d9      	lsls	r1, r3, #3
 8004b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b90:	00d0      	lsls	r0, r2, #3
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	1912      	adds	r2, r2, r4
 8004b98:	eb45 0303 	adc.w	r3, r5, r3
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	0299      	lsls	r1, r3, #10
 8004ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004baa:	0290      	lsls	r0, r2, #10
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f7fb fb60 	bl	8000280 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	60bb      	str	r3, [r7, #8]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004be6:	60bb      	str	r3, [r7, #8]
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	68bb      	ldr	r3, [r7, #8]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000380 	.word	0x20000380

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	0800abf8 	.word	0x0800abf8

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c48:	f7ff ffdc 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0b5b      	lsrs	r3, r3, #13
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800abf8 	.word	0x0800abf8

08004c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07b      	b.n	8004d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c8e:	d009      	beq.n	8004ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	61da      	str	r2, [r3, #28]
 8004c96:	e005      	b.n	8004ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fcfe 	bl	80026c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	ea42 0103 	orr.w	r1, r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0104 	and.w	r1, r3, #4
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0210 	and.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b088      	sub	sp, #32
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_SPI_Transmit+0x22>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e126      	b.n	8004fee <HAL_SPI_Transmit+0x270>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da8:	f7fd ffa2 	bl	8002cf0 <HAL_GetTick>
 8004dac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dc2:	e10b      	b.n	8004fdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x52>
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd4:	e102      	b.n	8004fdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d10f      	bne.n	8004e3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d007      	beq.n	8004e5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e64:	d14b      	bne.n	8004efe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_Transmit+0xf6>
 8004e6e:	8afb      	ldrh	r3, [r7, #22]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d13e      	bne.n	8004ef2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e98:	e02b      	b.n	8004ef2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d112      	bne.n	8004ece <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ecc:	e011      	b.n	8004ef2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ece:	f7fd ff0f 	bl	8002cf0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_Transmit+0x168>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_Transmit+0x16e>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ef0:	e074      	b.n	8004fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1ce      	bne.n	8004e9a <HAL_SPI_Transmit+0x11c>
 8004efc:	e04c      	b.n	8004f98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_Transmit+0x18e>
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d140      	bne.n	8004f8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f32:	e02c      	b.n	8004f8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d113      	bne.n	8004f6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f68:	e011      	b.n	8004f8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6a:	f7fd fec1 	bl	8002cf0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d803      	bhi.n	8004f82 <HAL_SPI_Transmit+0x204>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Transmit+0x20a>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f8c:	e026      	b.n	8004fdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1cd      	bne.n	8004f34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fbcb 	bl	8005738 <SPI_EndRxTxTransaction>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e000      	b.n	8004fdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	af02      	add	r7, sp, #8
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d112      	bne.n	800503a <HAL_SPI_Receive+0x44>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10e      	bne.n	800503a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2204      	movs	r2, #4
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005024:	88fa      	ldrh	r2, [r7, #6]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f8f1 	bl	8005218 <HAL_SPI_TransmitReceive>
 8005036:	4603      	mov	r3, r0
 8005038:	e0ea      	b.n	8005210 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_SPI_Receive+0x52>
 8005044:	2302      	movs	r3, #2
 8005046:	e0e3      	b.n	8005210 <HAL_SPI_Receive+0x21a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005050:	f7fd fe4e 	bl	8002cf0 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d002      	beq.n	8005068 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005062:	2302      	movs	r3, #2
 8005064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005066:	e0ca      	b.n	80051fe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Receive+0x7e>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005078:	e0c1      	b.n	80051fe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2204      	movs	r2, #4
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d10f      	bne.n	80050e2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d007      	beq.n	8005100 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d162      	bne.n	80051ce <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005108:	e02e      	b.n	8005168 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d115      	bne.n	8005144 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f103 020c 	add.w	r2, r3, #12
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005142:	e011      	b.n	8005168 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005144:	f7fd fdd4 	bl	8002cf0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d803      	bhi.n	800515c <HAL_SPI_Receive+0x166>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d102      	bne.n	8005162 <HAL_SPI_Receive+0x16c>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005166:	e04a      	b.n	80051fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1cb      	bne.n	800510a <HAL_SPI_Receive+0x114>
 8005172:	e031      	b.n	80051d8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d113      	bne.n	80051aa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	b292      	uxth	r2, r2
 800518e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051a8:	e011      	b.n	80051ce <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051aa:	f7fd fda1 	bl	8002cf0 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d803      	bhi.n	80051c2 <HAL_SPI_Receive+0x1cc>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d102      	bne.n	80051c8 <HAL_SPI_Receive+0x1d2>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80051cc:	e017      	b.n	80051fe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1cd      	bne.n	8005174 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fa45 	bl	800566c <SPI_EndRxTransaction>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
 80051fa:	e000      	b.n	80051fe <HAL_SPI_Receive+0x208>
  }

error :
 80051fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005226:	2301      	movs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_SPI_TransmitReceive+0x26>
 800523a:	2302      	movs	r3, #2
 800523c:	e18a      	b.n	8005554 <HAL_SPI_TransmitReceive+0x33c>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005246:	f7fd fd53 	bl	8002cf0 <HAL_GetTick>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005264:	2b01      	cmp	r3, #1
 8005266:	d00f      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x70>
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526e:	d107      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x68>
 8005278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800527c:	2b04      	cmp	r3, #4
 800527e:	d003      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005286:	e15b      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_SPI_TransmitReceive+0x82>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SPI_TransmitReceive+0x82>
 8005294:	887b      	ldrh	r3, [r7, #2]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052a0:	e14e      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d003      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2205      	movs	r2, #5
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	887a      	ldrh	r2, [r7, #2]
 80052c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	887a      	ldrh	r2, [r7, #2]
 80052de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d007      	beq.n	800530a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d178      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x10a>
 800531c:	8b7b      	ldrh	r3, [r7, #26]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d166      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005346:	e053      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d11b      	bne.n	800538e <HAL_SPI_TransmitReceive+0x176>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <HAL_SPI_TransmitReceive+0x176>
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d113      	bne.n	800538e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <HAL_SPI_TransmitReceive+0x1b8>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d014      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	b292      	uxth	r2, r2
 80053b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053cc:	2301      	movs	r3, #1
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053d0:	f7fd fc8e 	bl	8002cf0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053dc:	429a      	cmp	r2, r3
 80053de:	d807      	bhi.n	80053f0 <HAL_SPI_TransmitReceive+0x1d8>
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d003      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053ee:	e0a7      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1a6      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x130>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1a1      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x130>
 8005404:	e07c      	b.n	8005500 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x1fc>
 800540e:	8b7b      	ldrh	r3, [r7, #26]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d16b      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543a:	e057      	b.n	80054ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d11c      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x26c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x26c>
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d114      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	7812      	ldrb	r2, [r2, #0]
 8005466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d119      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x2ae>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d014      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c6:	f7fd fc13 	bl	8002cf0 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d803      	bhi.n	80054de <HAL_SPI_TransmitReceive+0x2c6>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d102      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2cc>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054ea:	e029      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1a2      	bne.n	800543c <HAL_SPI_TransmitReceive+0x224>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d19d      	bne.n	800543c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f917 	bl	8005738 <SPI_EndRxTxTransaction>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800551c:	e010      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	e000      	b.n	8005540 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800553e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005554:	4618      	mov	r0, r3
 8005556:	3730      	adds	r7, #48	; 0x30
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800556c:	f7fd fbc0 	bl	8002cf0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	4413      	add	r3, r2
 800557a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800557c:	f7fd fbb8 	bl	8002cf0 <HAL_GetTick>
 8005580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005582:	4b39      	ldr	r3, [pc, #228]	; (8005668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	015b      	lsls	r3, r3, #5
 8005588:	0d1b      	lsrs	r3, r3, #20
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	fb02 f303 	mul.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005592:	e054      	b.n	800563e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d050      	beq.n	800563e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800559c:	f7fd fba8 	bl	8002cf0 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d902      	bls.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13d      	bne.n	800562e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ca:	d111      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d4:	d004      	beq.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055de:	d107      	bne.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f8:	d10f      	bne.n	800561a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e017      	b.n	800565e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3b01      	subs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	429a      	cmp	r2, r3
 800565a:	d19b      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000380 	.word	0x20000380

0800566c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005680:	d111      	bne.n	80056a6 <SPI_EndRxTransaction+0x3a>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568a:	d004      	beq.n	8005696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	d107      	bne.n	80056a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ae:	d12a      	bne.n	8005706 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d012      	beq.n	80056e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2180      	movs	r1, #128	; 0x80
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ff49 	bl	800555c <SPI_WaitFlagStateUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d02d      	beq.n	800572c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e026      	b.n	800572e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2101      	movs	r1, #1
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff ff36 	bl	800555c <SPI_WaitFlagStateUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01a      	beq.n	800572c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e013      	b.n	800572e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2200      	movs	r2, #0
 800570e:	2101      	movs	r1, #1
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff ff23 	bl	800555c <SPI_WaitFlagStateUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e000      	b.n	800572e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <SPI_EndRxTxTransaction+0x7c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <SPI_EndRxTxTransaction+0x80>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0d5b      	lsrs	r3, r3, #21
 8005750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fef4 	bl	800555c <SPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d0f2      	beq.n	800578a <SPI_EndRxTxTransaction+0x52>
 80057a4:	e000      	b.n	80057a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80057a6:	bf00      	nop
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000380 	.word	0x20000380
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e034      	b.n	800583c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7fb f88a 	bl	8000900 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3308      	adds	r3, #8
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f001 fc6e 	bl	80070d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	461a      	mov	r2, r3
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	f001 fcb8 	bl	800717c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6858      	ldr	r0, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	f001 fced 	bl	80071f8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	f041 0101 	orr.w	r1, r1, #1
 8005836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e041      	b.n	80058da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fd f86a 	bl	8002944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fa96 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e04e      	b.n	800599a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d01d      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1f      	ldr	r2, [pc, #124]	; (80059ac <HAL_TIM_Base_Start_IT+0xc8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d111      	bne.n	8005988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b06      	cmp	r3, #6
 8005974:	d010      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	e007      	b.n	8005998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40010400 	.word	0x40010400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d122      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0202 	mvn.w	r2, #2
 80059f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9b5 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9a7 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9b8 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d122      	bne.n	8005a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d11b      	bne.n	8005a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0204 	mvn.w	r2, #4
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f98b 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f97d 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f98e 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0208 	mvn.w	r2, #8
 8005a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f961 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f953 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f964 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d122      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0210 	mvn.w	r2, #16
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2208      	movs	r2, #8
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f937 	bl	8005d76 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f929 	bl	8005d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f93a 	bl	8005d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d10e      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d107      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0201 	mvn.w	r2, #1
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc fd44 	bl	80025d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b80      	cmp	r3, #128	; 0x80
 8005b54:	d10e      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d107      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fae0 	bl	8006134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b40      	cmp	r3, #64	; 0x40
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b40      	cmp	r3, #64	; 0x40
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8ff 	bl	8005d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d10e      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d107      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0220 	mvn.w	r2, #32
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 faaa 	bl	8006120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0b4      	b.n	8005d5a <HAL_TIM_ConfigClockSource+0x186>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c28:	d03e      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	f200 8087 	bhi.w	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	f000 8086 	beq.w	8005d46 <HAL_TIM_ConfigClockSource+0x172>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	d87f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d01a      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0xa6>
 8005c44:	2b70      	cmp	r3, #112	; 0x70
 8005c46:	d87b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d050      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0x11a>
 8005c4c:	2b60      	cmp	r3, #96	; 0x60
 8005c4e:	d877      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d03c      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xfa>
 8005c54:	2b50      	cmp	r3, #80	; 0x50
 8005c56:	d873      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d058      	beq.n	8005d0e <HAL_TIM_ConfigClockSource+0x13a>
 8005c5c:	2b40      	cmp	r3, #64	; 0x40
 8005c5e:	d86f      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d064      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b30      	cmp	r3, #48	; 0x30
 8005c66:	d86b      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d060      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d867      	bhi.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05c      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d05a      	beq.n	8005d2e <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	e062      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6899      	ldr	r1, [r3, #8]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 f9ad 	bl	8005fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	609a      	str	r2, [r3, #8]
      break;
 8005ca6:	e04f      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6899      	ldr	r1, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f000 f996 	bl	8005fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e03c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6859      	ldr	r1, [r3, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f000 f90a 	bl	8005ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2150      	movs	r1, #80	; 0x50
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f963 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 8005cec:	e02c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 f929 	bl	8005f52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2160      	movs	r1, #96	; 0x60
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 f953 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 8005d0c:	e01c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6859      	ldr	r1, [r3, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 f8ea 	bl	8005ef4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 f943 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f000 f93a 	bl	8005fb2 <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d00f      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a3d      	ldr	r2, [pc, #244]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3c      	ldr	r2, [pc, #240]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d108      	bne.n	8005e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2f      	ldr	r2, [pc, #188]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d027      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <TIM_Base_SetConfig+0x118>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d023      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <TIM_Base_SetConfig+0x11c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <TIM_Base_SetConfig+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a28      	ldr	r2, [pc, #160]	; (8005edc <TIM_Base_SetConfig+0x128>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <TIM_Base_SetConfig+0x12c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a26      	ldr	r2, [pc, #152]	; (8005ee4 <TIM_Base_SetConfig+0x130>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <TIM_Base_SetConfig+0x134>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a24      	ldr	r2, [pc, #144]	; (8005eec <TIM_Base_SetConfig+0x138>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <TIM_Base_SetConfig+0x13c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <TIM_Base_SetConfig+0x124>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	615a      	str	r2, [r3, #20]
}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40010400 	.word	0x40010400
 8005edc:	40014000 	.word	0x40014000
 8005ee0:	40014400 	.word	0x40014400
 8005ee4:	40014800 	.word	0x40014800
 8005ee8:	40001800 	.word	0x40001800
 8005eec:	40001c00 	.word	0x40001c00
 8005ef0:	40002000 	.word	0x40002000

08005ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f023 030a 	bic.w	r3, r3, #10
 8005f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b087      	sub	sp, #28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f043 0307 	orr.w	r3, r3, #7
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	431a      	orrs	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800603c:	2302      	movs	r3, #2
 800603e:	e05a      	b.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a21      	ldr	r2, [pc, #132]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608c:	d01d      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a18      	ldr	r2, [pc, #96]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d10c      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40010400 	.word	0x40010400
 8006118:	40014000 	.word	0x40014000
 800611c:	40001800 	.word	0x40001800

08006120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e03f      	b.n	80061da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fca0 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	; 0x24
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800618a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fddb 	bl	8006d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b08a      	sub	sp, #40	; 0x28
 80061e6:	af02      	add	r7, sp, #8
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d17c      	bne.n	80062fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_Transmit+0x2c>
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e075      	b.n	80062fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_UART_Transmit+0x3e>
 800621c:	2302      	movs	r3, #2
 800621e:	e06e      	b.n	80062fe <HAL_UART_Transmit+0x11c>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2221      	movs	r2, #33	; 0x21
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006236:	f7fc fd5b 	bl	8002cf0 <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006250:	d108      	bne.n	8006264 <HAL_UART_Transmit+0x82>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	e003      	b.n	800626c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006274:	e02a      	b.n	80062cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fb1f 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e036      	b.n	80062fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	3302      	adds	r3, #2
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e007      	b.n	80062be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1cf      	bne.n	8006276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	2140      	movs	r1, #64	; 0x40
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 faef 	bl	80068c4 <UART_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e006      	b.n	80062fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	e000      	b.n	80062fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	4613      	mov	r3, r2
 8006312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b20      	cmp	r3, #32
 800631e:	d11d      	bne.n	800635c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_UART_Receive_IT+0x26>
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e016      	b.n	800635e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_UART_Receive_IT+0x38>
 800633a:	2302      	movs	r3, #2
 800633c:	e00f      	b.n	800635e <HAL_UART_Receive_IT+0x58>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	461a      	mov	r2, r3
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fb24 	bl	80069a0 <UART_Start_Receive_IT>
 8006358:	4603      	mov	r3, r0
 800635a:	e000      	b.n	800635e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800635c:	2302      	movs	r3, #2
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b0ba      	sub	sp, #232	; 0xe8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006394:	2300      	movs	r3, #0
 8006396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_UART_IRQHandler+0x66>
 80063ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc03 	bl	8006bd2 <UART_Receive_IT>
      return;
 80063cc:	e256      	b.n	800687c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80de 	beq.w	8006594 <HAL_UART_IRQHandler+0x22c>
 80063d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80d1 	beq.w	8006594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0xae>
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <HAL_UART_IRQHandler+0xd2>
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f043 0202 	orr.w	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <HAL_UART_IRQHandler+0xf6>
 8006446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f043 0204 	orr.w	r2, r3, #4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d011      	beq.n	800648e <HAL_UART_IRQHandler+0x126>
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0208 	orr.w	r2, r3, #8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 81ed 	beq.w	8006872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_UART_IRQHandler+0x14e>
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fb8e 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	bf0c      	ite	eq
 80064c4:	2301      	moveq	r3, #1
 80064c6:	2300      	movne	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <HAL_UART_IRQHandler+0x17a>
 80064da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04f      	beq.n	8006582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa96 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	d141      	bne.n	800657a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3314      	adds	r3, #20
 80064fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800650c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800652e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800653a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1d9      	bne.n	80064f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	2b00      	cmp	r3, #0
 8006548:	d013      	beq.n	8006572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	4a7d      	ldr	r2, [pc, #500]	; (8006744 <HAL_UART_IRQHandler+0x3dc>)
 8006550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	4618      	mov	r0, r3
 8006558:	f7fc fd7b 	bl	8003052 <HAL_DMA_Abort_IT>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800656c:	4610      	mov	r0, r2
 800656e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	e00e      	b.n	8006590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f990 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	e00a      	b.n	8006590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f98c 	bl	8006898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	e006      	b.n	8006590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f988 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800658e:	e170      	b.n	8006872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	bf00      	nop
    return;
 8006592:	e16e      	b.n	8006872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	f040 814a 	bne.w	8006832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8143 	beq.w	8006832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 813c 	beq.w	8006832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	60bb      	str	r3, [r7, #8]
 80065ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	f040 80b4 	bne.w	8006748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8140 	beq.w	8006876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065fe:	429a      	cmp	r2, r3
 8006600:	f080 8139 	bcs.w	8006876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800660a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006616:	f000 8088 	beq.w	800672a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800664a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800665e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1d9      	bne.n	800661a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3314      	adds	r3, #20
 8006686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800668a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800668e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e1      	bne.n	8006666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e3      	bne.n	80066a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fa:	f023 0310 	bic.w	r3, r3, #16
 80066fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800670c:	65ba      	str	r2, [r7, #88]	; 0x58
 800670e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800671a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e3      	bne.n	80066e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	4618      	mov	r0, r3
 8006726:	f7fc fc24 	bl	8002f72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006732:	b29b      	uxth	r3, r3
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8b6 	bl	80068ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006740:	e099      	b.n	8006876 <HAL_UART_IRQHandler+0x50e>
 8006742:	bf00      	nop
 8006744:	08006adb 	.word	0x08006adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006750:	b29b      	uxth	r3, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 808b 	beq.w	800687a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8086 	beq.w	800687a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	330c      	adds	r3, #12
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006792:	647a      	str	r2, [r7, #68]	; 0x44
 8006794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e3      	bne.n	800676e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	623b      	str	r3, [r7, #32]
   return(result);
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067ca:	633a      	str	r2, [r7, #48]	; 0x30
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e3      	bne.n	80067a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006810:	61fa      	str	r2, [r7, #28]
 8006812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	617b      	str	r3, [r7, #20]
   return(result);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e3      	bne.n	80067ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f83e 	bl	80068ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006830:	e023      	b.n	800687a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_UART_IRQHandler+0x4ea>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f959 	bl	8006b02 <UART_Transmit_IT>
    return;
 8006850:	e014      	b.n	800687c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <HAL_UART_IRQHandler+0x514>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d008      	beq.n	800687c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f999 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 8006870:	e004      	b.n	800687c <HAL_UART_IRQHandler+0x514>
    return;
 8006872:	bf00      	nop
 8006874:	e002      	b.n	800687c <HAL_UART_IRQHandler+0x514>
      return;
 8006876:	bf00      	nop
 8006878:	e000      	b.n	800687c <HAL_UART_IRQHandler+0x514>
      return;
 800687a:	bf00      	nop
  }
}
 800687c:	37e8      	adds	r7, #232	; 0xe8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b090      	sub	sp, #64	; 0x40
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	e050      	b.n	8006978 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d04c      	beq.n	8006978 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e4:	f7fc fa04 	bl	8002cf0 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d241      	bcs.n	8006978 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006914:	637a      	str	r2, [r7, #52]	; 0x34
 8006916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3314      	adds	r3, #20
 800692e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	613b      	str	r3, [r7, #16]
   return(result);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006948:	623a      	str	r2, [r7, #32]
 800694a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	69f9      	ldr	r1, [r7, #28]
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	61bb      	str	r3, [r7, #24]
   return(result);
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e00f      	b.n	8006998 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	461a      	mov	r2, r3
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	429a      	cmp	r2, r3
 8006994:	d09f      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3740      	adds	r7, #64	; 0x40
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	88fa      	ldrh	r2, [r7, #6]
 80069be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2222      	movs	r2, #34	; 0x22
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0201 	orr.w	r2, r2, #1
 80069f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0220 	orr.w	r2, r2, #32
 8006a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	; 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fecf 	bl	8006898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	; 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe5e 	bl	8006884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 80ab 	bne.w	8006d3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d117      	bne.n	8006c22 <UART_Receive_IT+0x50>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e026      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15a      	bne.n	8006d3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d135      	bne.n	8006d30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	623a      	str	r2, [r7, #32]
 8006cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d10a      	bne.n	8006d22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fdbf 	bl	80068ac <HAL_UARTEx_RxEventCallback>
 8006d2e:	e002      	b.n	8006d36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fb fe55 	bl	80029e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e002      	b.n	8006d40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b09f      	sub	sp, #124	; 0x7c
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	68d9      	ldr	r1, [r3, #12]
 8006d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	ea40 0301 	orr.w	r3, r0, r1
 8006d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d8c:	f021 010c 	bic.w	r1, r1, #12
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d96:	430b      	orrs	r3, r1
 8006d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	6999      	ldr	r1, [r3, #24]
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	ea40 0301 	orr.w	r3, r0, r1
 8006db0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4bc5      	ldr	r3, [pc, #788]	; (80070cc <UART_SetConfig+0x384>)
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d004      	beq.n	8006dc6 <UART_SetConfig+0x7e>
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4bc3      	ldr	r3, [pc, #780]	; (80070d0 <UART_SetConfig+0x388>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d103      	bne.n	8006dce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dc6:	f7fd ff3d 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006dca:	6778      	str	r0, [r7, #116]	; 0x74
 8006dcc:	e002      	b.n	8006dd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dce:	f7fd ff25 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006dd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	f040 80b6 	bne.w	8006f4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de2:	461c      	mov	r4, r3
 8006de4:	f04f 0500 	mov.w	r5, #0
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	6439      	str	r1, [r7, #64]	; 0x40
 8006df0:	415b      	adcs	r3, r3
 8006df2:	647b      	str	r3, [r7, #68]	; 0x44
 8006df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006df8:	1912      	adds	r2, r2, r4
 8006dfa:	eb45 0303 	adc.w	r3, r5, r3
 8006dfe:	f04f 0000 	mov.w	r0, #0
 8006e02:	f04f 0100 	mov.w	r1, #0
 8006e06:	00d9      	lsls	r1, r3, #3
 8006e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e0c:	00d0      	lsls	r0, r2, #3
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	1911      	adds	r1, r2, r4
 8006e14:	6639      	str	r1, [r7, #96]	; 0x60
 8006e16:	416b      	adcs	r3, r5
 8006e18:	667b      	str	r3, [r7, #100]	; 0x64
 8006e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e34:	f7f9 fa24 	bl	8000280 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4ba5      	ldr	r3, [pc, #660]	; (80070d4 <UART_SetConfig+0x38c>)
 8006e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	011e      	lsls	r6, r3, #4
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	461c      	mov	r4, r3
 8006e4a:	f04f 0500 	mov.w	r5, #0
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	6339      	str	r1, [r7, #48]	; 0x30
 8006e56:	415b      	adcs	r3, r3
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e5e:	1912      	adds	r2, r2, r4
 8006e60:	eb45 0303 	adc.w	r3, r5, r3
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	00d9      	lsls	r1, r3, #3
 8006e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e72:	00d0      	lsls	r0, r2, #3
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	1911      	adds	r1, r2, r4
 8006e7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e7c:	416b      	adcs	r3, r5
 8006e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e9a:	f7f9 f9f1 	bl	8000280 <__aeabi_uldivmod>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4b8c      	ldr	r3, [pc, #560]	; (80070d4 <UART_SetConfig+0x38c>)
 8006ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	2164      	movs	r1, #100	; 0x64
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	3332      	adds	r3, #50	; 0x32
 8006eb6:	4a87      	ldr	r2, [pc, #540]	; (80070d4 <UART_SetConfig+0x38c>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ec4:	441e      	add	r6, r3
 8006ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	1894      	adds	r4, r2, r2
 8006ed4:	623c      	str	r4, [r7, #32]
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ede:	1812      	adds	r2, r2, r0
 8006ee0:	eb41 0303 	adc.w	r3, r1, r3
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	f04f 0500 	mov.w	r5, #0
 8006eec:	00dd      	lsls	r5, r3, #3
 8006eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ef2:	00d4      	lsls	r4, r2, #3
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	1814      	adds	r4, r2, r0
 8006efa:	653c      	str	r4, [r7, #80]	; 0x50
 8006efc:	414b      	adcs	r3, r1
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	61b9      	str	r1, [r7, #24]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f1a:	f7f9 f9b1 	bl	8000280 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b6c      	ldr	r3, [pc, #432]	; (80070d4 <UART_SetConfig+0x38c>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3332      	adds	r3, #50	; 0x32
 8006f36:	4a67      	ldr	r2, [pc, #412]	; (80070d4 <UART_SetConfig+0x38c>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	f003 0207 	and.w	r2, r3, #7
 8006f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4432      	add	r2, r6
 8006f48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f4a:	e0b9      	b.n	80070c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4e:	461c      	mov	r4, r3
 8006f50:	f04f 0500 	mov.w	r5, #0
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	1891      	adds	r1, r2, r2
 8006f5a:	6139      	str	r1, [r7, #16]
 8006f5c:	415b      	adcs	r3, r3
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f64:	1912      	adds	r2, r2, r4
 8006f66:	eb45 0303 	adc.w	r3, r5, r3
 8006f6a:	f04f 0000 	mov.w	r0, #0
 8006f6e:	f04f 0100 	mov.w	r1, #0
 8006f72:	00d9      	lsls	r1, r3, #3
 8006f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f78:	00d0      	lsls	r0, r2, #3
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	eb12 0804 	adds.w	r8, r2, r4
 8006f82:	eb43 0905 	adc.w	r9, r3, r5
 8006f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	008b      	lsls	r3, r1, #2
 8006f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f9e:	0082      	lsls	r2, r0, #2
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 f96c 	bl	8000280 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <UART_SetConfig+0x38c>)
 8006fae:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	011e      	lsls	r6, r3, #4
 8006fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	1894      	adds	r4, r2, r2
 8006fc4:	60bc      	str	r4, [r7, #8]
 8006fc6:	415b      	adcs	r3, r3
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fce:	1812      	adds	r2, r2, r0
 8006fd0:	eb41 0303 	adc.w	r3, r1, r3
 8006fd4:	f04f 0400 	mov.w	r4, #0
 8006fd8:	f04f 0500 	mov.w	r5, #0
 8006fdc:	00dd      	lsls	r5, r3, #3
 8006fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fe2:	00d4      	lsls	r4, r2, #3
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	1814      	adds	r4, r2, r0
 8006fea:	64bc      	str	r4, [r7, #72]	; 0x48
 8006fec:	414b      	adcs	r3, r1
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	008b      	lsls	r3, r1, #2
 8007004:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007008:	0082      	lsls	r2, r0, #2
 800700a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800700e:	f7f9 f937 	bl	8000280 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <UART_SetConfig+0x38c>)
 8007018:	fba3 1302 	umull	r1, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	2164      	movs	r1, #100	; 0x64
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	3332      	adds	r3, #50	; 0x32
 800702a:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <UART_SetConfig+0x38c>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007036:	441e      	add	r6, r3
 8007038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703a:	4618      	mov	r0, r3
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	1894      	adds	r4, r2, r2
 8007046:	603c      	str	r4, [r7, #0]
 8007048:	415b      	adcs	r3, r3
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	1812      	adds	r2, r2, r0
 8007052:	eb41 0303 	adc.w	r3, r1, r3
 8007056:	f04f 0400 	mov.w	r4, #0
 800705a:	f04f 0500 	mov.w	r5, #0
 800705e:	00dd      	lsls	r5, r3, #3
 8007060:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007064:	00d4      	lsls	r4, r2, #3
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	eb12 0a00 	adds.w	sl, r2, r0
 800706e:	eb43 0b01 	adc.w	fp, r3, r1
 8007072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f04f 0100 	mov.w	r1, #0
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	008b      	lsls	r3, r1, #2
 8007086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800708a:	0082      	lsls	r2, r0, #2
 800708c:	4650      	mov	r0, sl
 800708e:	4659      	mov	r1, fp
 8007090:	f7f9 f8f6 	bl	8000280 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <UART_SetConfig+0x38c>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <UART_SetConfig+0x38c>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4432      	add	r2, r6
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	377c      	adds	r7, #124	; 0x7c
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	bf00      	nop
 80070cc:	40011000 	.word	0x40011000
 80070d0:	40011400 	.word	0x40011400
 80070d4:	51eb851f 	.word	0x51eb851f

080070d8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4b20      	ldr	r3, [pc, #128]	; (8007178 <FSMC_NORSRAM_Init+0xa0>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007102:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007108:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800710e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007114:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800711a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007120:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007126:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800712c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007132:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007138:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800713e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007144:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d103      	bne.n	800715c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800715a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	fff00080 	.word	0xfff00080

0800717c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007196:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800719e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071aa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80071b2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80071ba:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071c4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	3b02      	subs	r3, #2
 80071cc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80071ce:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071d4:	4313      	orrs	r3, r2
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6979      	ldr	r1, [r7, #20]
 80071e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
	...

080071f8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007210:	d122      	bne.n	8007258 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007220:	4013      	ands	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800722e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007236:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800723e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007244:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6979      	ldr	r1, [r7, #20]
 8007252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007256:	e005      	b.n	8007264 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	cff00000 	.word	0xcff00000

08007278 <__errno>:
 8007278:	4b01      	ldr	r3, [pc, #4]	; (8007280 <__errno+0x8>)
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	2000038c 	.word	0x2000038c

08007284 <__libc_init_array>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4d0d      	ldr	r5, [pc, #52]	; (80072bc <__libc_init_array+0x38>)
 8007288:	4c0d      	ldr	r4, [pc, #52]	; (80072c0 <__libc_init_array+0x3c>)
 800728a:	1b64      	subs	r4, r4, r5
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	2600      	movs	r6, #0
 8007290:	42a6      	cmp	r6, r4
 8007292:	d109      	bne.n	80072a8 <__libc_init_array+0x24>
 8007294:	4d0b      	ldr	r5, [pc, #44]	; (80072c4 <__libc_init_array+0x40>)
 8007296:	4c0c      	ldr	r4, [pc, #48]	; (80072c8 <__libc_init_array+0x44>)
 8007298:	f000 fc4e 	bl	8007b38 <_init>
 800729c:	1b64      	subs	r4, r4, r5
 800729e:	10a4      	asrs	r4, r4, #2
 80072a0:	2600      	movs	r6, #0
 80072a2:	42a6      	cmp	r6, r4
 80072a4:	d105      	bne.n	80072b2 <__libc_init_array+0x2e>
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ac:	4798      	blx	r3
 80072ae:	3601      	adds	r6, #1
 80072b0:	e7ee      	b.n	8007290 <__libc_init_array+0xc>
 80072b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b6:	4798      	blx	r3
 80072b8:	3601      	adds	r6, #1
 80072ba:	e7f2      	b.n	80072a2 <__libc_init_array+0x1e>
 80072bc:	0800ac3c 	.word	0x0800ac3c
 80072c0:	0800ac3c 	.word	0x0800ac3c
 80072c4:	0800ac3c 	.word	0x0800ac3c
 80072c8:	0800ac40 	.word	0x0800ac40

080072cc <memset>:
 80072cc:	4402      	add	r2, r0
 80072ce:	4603      	mov	r3, r0
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d100      	bne.n	80072d6 <memset+0xa>
 80072d4:	4770      	bx	lr
 80072d6:	f803 1b01 	strb.w	r1, [r3], #1
 80072da:	e7f9      	b.n	80072d0 <memset+0x4>

080072dc <siprintf>:
 80072dc:	b40e      	push	{r1, r2, r3}
 80072de:	b500      	push	{lr}
 80072e0:	b09c      	sub	sp, #112	; 0x70
 80072e2:	ab1d      	add	r3, sp, #116	; 0x74
 80072e4:	9002      	str	r0, [sp, #8]
 80072e6:	9006      	str	r0, [sp, #24]
 80072e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072ec:	4809      	ldr	r0, [pc, #36]	; (8007314 <siprintf+0x38>)
 80072ee:	9107      	str	r1, [sp, #28]
 80072f0:	9104      	str	r1, [sp, #16]
 80072f2:	4909      	ldr	r1, [pc, #36]	; (8007318 <siprintf+0x3c>)
 80072f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f8:	9105      	str	r1, [sp, #20]
 80072fa:	6800      	ldr	r0, [r0, #0]
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	a902      	add	r1, sp, #8
 8007300:	f000 f868 	bl	80073d4 <_svfiprintf_r>
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	b01c      	add	sp, #112	; 0x70
 800730c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007310:	b003      	add	sp, #12
 8007312:	4770      	bx	lr
 8007314:	2000038c 	.word	0x2000038c
 8007318:	ffff0208 	.word	0xffff0208

0800731c <__ssputs_r>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	688e      	ldr	r6, [r1, #8]
 8007322:	429e      	cmp	r6, r3
 8007324:	4682      	mov	sl, r0
 8007326:	460c      	mov	r4, r1
 8007328:	4690      	mov	r8, r2
 800732a:	461f      	mov	r7, r3
 800732c:	d838      	bhi.n	80073a0 <__ssputs_r+0x84>
 800732e:	898a      	ldrh	r2, [r1, #12]
 8007330:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007334:	d032      	beq.n	800739c <__ssputs_r+0x80>
 8007336:	6825      	ldr	r5, [r4, #0]
 8007338:	6909      	ldr	r1, [r1, #16]
 800733a:	eba5 0901 	sub.w	r9, r5, r1
 800733e:	6965      	ldr	r5, [r4, #20]
 8007340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007348:	3301      	adds	r3, #1
 800734a:	444b      	add	r3, r9
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	429d      	cmp	r5, r3
 8007350:	bf38      	it	cc
 8007352:	461d      	movcc	r5, r3
 8007354:	0553      	lsls	r3, r2, #21
 8007356:	d531      	bpl.n	80073bc <__ssputs_r+0xa0>
 8007358:	4629      	mov	r1, r5
 800735a:	f000 fb47 	bl	80079ec <_malloc_r>
 800735e:	4606      	mov	r6, r0
 8007360:	b950      	cbnz	r0, 8007378 <__ssputs_r+0x5c>
 8007362:	230c      	movs	r3, #12
 8007364:	f8ca 3000 	str.w	r3, [sl]
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007378:	6921      	ldr	r1, [r4, #16]
 800737a:	464a      	mov	r2, r9
 800737c:	f000 fabe 	bl	80078fc <memcpy>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	6126      	str	r6, [r4, #16]
 800738e:	6165      	str	r5, [r4, #20]
 8007390:	444e      	add	r6, r9
 8007392:	eba5 0509 	sub.w	r5, r5, r9
 8007396:	6026      	str	r6, [r4, #0]
 8007398:	60a5      	str	r5, [r4, #8]
 800739a:	463e      	mov	r6, r7
 800739c:	42be      	cmp	r6, r7
 800739e:	d900      	bls.n	80073a2 <__ssputs_r+0x86>
 80073a0:	463e      	mov	r6, r7
 80073a2:	4632      	mov	r2, r6
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	4641      	mov	r1, r8
 80073a8:	f000 fab6 	bl	8007918 <memmove>
 80073ac:	68a3      	ldr	r3, [r4, #8]
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	1b9b      	subs	r3, r3, r6
 80073b2:	4432      	add	r2, r6
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6022      	str	r2, [r4, #0]
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7db      	b.n	8007374 <__ssputs_r+0x58>
 80073bc:	462a      	mov	r2, r5
 80073be:	f000 fb6f 	bl	8007aa0 <_realloc_r>
 80073c2:	4606      	mov	r6, r0
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d1e1      	bne.n	800738c <__ssputs_r+0x70>
 80073c8:	6921      	ldr	r1, [r4, #16]
 80073ca:	4650      	mov	r0, sl
 80073cc:	f000 fabe 	bl	800794c <_free_r>
 80073d0:	e7c7      	b.n	8007362 <__ssputs_r+0x46>
	...

080073d4 <_svfiprintf_r>:
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	4698      	mov	r8, r3
 80073da:	898b      	ldrh	r3, [r1, #12]
 80073dc:	061b      	lsls	r3, r3, #24
 80073de:	b09d      	sub	sp, #116	; 0x74
 80073e0:	4607      	mov	r7, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	4614      	mov	r4, r2
 80073e6:	d50e      	bpl.n	8007406 <_svfiprintf_r+0x32>
 80073e8:	690b      	ldr	r3, [r1, #16]
 80073ea:	b963      	cbnz	r3, 8007406 <_svfiprintf_r+0x32>
 80073ec:	2140      	movs	r1, #64	; 0x40
 80073ee:	f000 fafd 	bl	80079ec <_malloc_r>
 80073f2:	6028      	str	r0, [r5, #0]
 80073f4:	6128      	str	r0, [r5, #16]
 80073f6:	b920      	cbnz	r0, 8007402 <_svfiprintf_r+0x2e>
 80073f8:	230c      	movs	r3, #12
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	e0d1      	b.n	80075a6 <_svfiprintf_r+0x1d2>
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	616b      	str	r3, [r5, #20]
 8007406:	2300      	movs	r3, #0
 8007408:	9309      	str	r3, [sp, #36]	; 0x24
 800740a:	2320      	movs	r3, #32
 800740c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007410:	f8cd 800c 	str.w	r8, [sp, #12]
 8007414:	2330      	movs	r3, #48	; 0x30
 8007416:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075c0 <_svfiprintf_r+0x1ec>
 800741a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800741e:	f04f 0901 	mov.w	r9, #1
 8007422:	4623      	mov	r3, r4
 8007424:	469a      	mov	sl, r3
 8007426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742a:	b10a      	cbz	r2, 8007430 <_svfiprintf_r+0x5c>
 800742c:	2a25      	cmp	r2, #37	; 0x25
 800742e:	d1f9      	bne.n	8007424 <_svfiprintf_r+0x50>
 8007430:	ebba 0b04 	subs.w	fp, sl, r4
 8007434:	d00b      	beq.n	800744e <_svfiprintf_r+0x7a>
 8007436:	465b      	mov	r3, fp
 8007438:	4622      	mov	r2, r4
 800743a:	4629      	mov	r1, r5
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff ff6d 	bl	800731c <__ssputs_r>
 8007442:	3001      	adds	r0, #1
 8007444:	f000 80aa 	beq.w	800759c <_svfiprintf_r+0x1c8>
 8007448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744a:	445a      	add	r2, fp
 800744c:	9209      	str	r2, [sp, #36]	; 0x24
 800744e:	f89a 3000 	ldrb.w	r3, [sl]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80a2 	beq.w	800759c <_svfiprintf_r+0x1c8>
 8007458:	2300      	movs	r3, #0
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007462:	f10a 0a01 	add.w	sl, sl, #1
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746e:	931a      	str	r3, [sp, #104]	; 0x68
 8007470:	4654      	mov	r4, sl
 8007472:	2205      	movs	r2, #5
 8007474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007478:	4851      	ldr	r0, [pc, #324]	; (80075c0 <_svfiprintf_r+0x1ec>)
 800747a:	f7f8 feb1 	bl	80001e0 <memchr>
 800747e:	9a04      	ldr	r2, [sp, #16]
 8007480:	b9d8      	cbnz	r0, 80074ba <_svfiprintf_r+0xe6>
 8007482:	06d0      	lsls	r0, r2, #27
 8007484:	bf44      	itt	mi
 8007486:	2320      	movmi	r3, #32
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748c:	0711      	lsls	r1, r2, #28
 800748e:	bf44      	itt	mi
 8007490:	232b      	movmi	r3, #43	; 0x2b
 8007492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007496:	f89a 3000 	ldrb.w	r3, [sl]
 800749a:	2b2a      	cmp	r3, #42	; 0x2a
 800749c:	d015      	beq.n	80074ca <_svfiprintf_r+0xf6>
 800749e:	9a07      	ldr	r2, [sp, #28]
 80074a0:	4654      	mov	r4, sl
 80074a2:	2000      	movs	r0, #0
 80074a4:	f04f 0c0a 	mov.w	ip, #10
 80074a8:	4621      	mov	r1, r4
 80074aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ae:	3b30      	subs	r3, #48	; 0x30
 80074b0:	2b09      	cmp	r3, #9
 80074b2:	d94e      	bls.n	8007552 <_svfiprintf_r+0x17e>
 80074b4:	b1b0      	cbz	r0, 80074e4 <_svfiprintf_r+0x110>
 80074b6:	9207      	str	r2, [sp, #28]
 80074b8:	e014      	b.n	80074e4 <_svfiprintf_r+0x110>
 80074ba:	eba0 0308 	sub.w	r3, r0, r8
 80074be:	fa09 f303 	lsl.w	r3, r9, r3
 80074c2:	4313      	orrs	r3, r2
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	46a2      	mov	sl, r4
 80074c8:	e7d2      	b.n	8007470 <_svfiprintf_r+0x9c>
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	1d19      	adds	r1, r3, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	9103      	str	r1, [sp, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfbb      	ittet	lt
 80074d6:	425b      	neglt	r3, r3
 80074d8:	f042 0202 	orrlt.w	r2, r2, #2
 80074dc:	9307      	strge	r3, [sp, #28]
 80074de:	9307      	strlt	r3, [sp, #28]
 80074e0:	bfb8      	it	lt
 80074e2:	9204      	strlt	r2, [sp, #16]
 80074e4:	7823      	ldrb	r3, [r4, #0]
 80074e6:	2b2e      	cmp	r3, #46	; 0x2e
 80074e8:	d10c      	bne.n	8007504 <_svfiprintf_r+0x130>
 80074ea:	7863      	ldrb	r3, [r4, #1]
 80074ec:	2b2a      	cmp	r3, #42	; 0x2a
 80074ee:	d135      	bne.n	800755c <_svfiprintf_r+0x188>
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	1d1a      	adds	r2, r3, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	9203      	str	r2, [sp, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bfb8      	it	lt
 80074fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007500:	3402      	adds	r4, #2
 8007502:	9305      	str	r3, [sp, #20]
 8007504:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075d0 <_svfiprintf_r+0x1fc>
 8007508:	7821      	ldrb	r1, [r4, #0]
 800750a:	2203      	movs	r2, #3
 800750c:	4650      	mov	r0, sl
 800750e:	f7f8 fe67 	bl	80001e0 <memchr>
 8007512:	b140      	cbz	r0, 8007526 <_svfiprintf_r+0x152>
 8007514:	2340      	movs	r3, #64	; 0x40
 8007516:	eba0 000a 	sub.w	r0, r0, sl
 800751a:	fa03 f000 	lsl.w	r0, r3, r0
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	4303      	orrs	r3, r0
 8007522:	3401      	adds	r4, #1
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752a:	4826      	ldr	r0, [pc, #152]	; (80075c4 <_svfiprintf_r+0x1f0>)
 800752c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007530:	2206      	movs	r2, #6
 8007532:	f7f8 fe55 	bl	80001e0 <memchr>
 8007536:	2800      	cmp	r0, #0
 8007538:	d038      	beq.n	80075ac <_svfiprintf_r+0x1d8>
 800753a:	4b23      	ldr	r3, [pc, #140]	; (80075c8 <_svfiprintf_r+0x1f4>)
 800753c:	bb1b      	cbnz	r3, 8007586 <_svfiprintf_r+0x1b2>
 800753e:	9b03      	ldr	r3, [sp, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	f023 0307 	bic.w	r3, r3, #7
 8007546:	3308      	adds	r3, #8
 8007548:	9303      	str	r3, [sp, #12]
 800754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754c:	4433      	add	r3, r6
 800754e:	9309      	str	r3, [sp, #36]	; 0x24
 8007550:	e767      	b.n	8007422 <_svfiprintf_r+0x4e>
 8007552:	fb0c 3202 	mla	r2, ip, r2, r3
 8007556:	460c      	mov	r4, r1
 8007558:	2001      	movs	r0, #1
 800755a:	e7a5      	b.n	80074a8 <_svfiprintf_r+0xd4>
 800755c:	2300      	movs	r3, #0
 800755e:	3401      	adds	r4, #1
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	4619      	mov	r1, r3
 8007564:	f04f 0c0a 	mov.w	ip, #10
 8007568:	4620      	mov	r0, r4
 800756a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800756e:	3a30      	subs	r2, #48	; 0x30
 8007570:	2a09      	cmp	r2, #9
 8007572:	d903      	bls.n	800757c <_svfiprintf_r+0x1a8>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0c5      	beq.n	8007504 <_svfiprintf_r+0x130>
 8007578:	9105      	str	r1, [sp, #20]
 800757a:	e7c3      	b.n	8007504 <_svfiprintf_r+0x130>
 800757c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007580:	4604      	mov	r4, r0
 8007582:	2301      	movs	r3, #1
 8007584:	e7f0      	b.n	8007568 <_svfiprintf_r+0x194>
 8007586:	ab03      	add	r3, sp, #12
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	462a      	mov	r2, r5
 800758c:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <_svfiprintf_r+0x1f8>)
 800758e:	a904      	add	r1, sp, #16
 8007590:	4638      	mov	r0, r7
 8007592:	f3af 8000 	nop.w
 8007596:	1c42      	adds	r2, r0, #1
 8007598:	4606      	mov	r6, r0
 800759a:	d1d6      	bne.n	800754a <_svfiprintf_r+0x176>
 800759c:	89ab      	ldrh	r3, [r5, #12]
 800759e:	065b      	lsls	r3, r3, #25
 80075a0:	f53f af2c 	bmi.w	80073fc <_svfiprintf_r+0x28>
 80075a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a6:	b01d      	add	sp, #116	; 0x74
 80075a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <_svfiprintf_r+0x1f8>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 f87a 	bl	80076b0 <_printf_i>
 80075bc:	e7eb      	b.n	8007596 <_svfiprintf_r+0x1c2>
 80075be:	bf00      	nop
 80075c0:	0800ac00 	.word	0x0800ac00
 80075c4:	0800ac0a 	.word	0x0800ac0a
 80075c8:	00000000 	.word	0x00000000
 80075cc:	0800731d 	.word	0x0800731d
 80075d0:	0800ac06 	.word	0x0800ac06

080075d4 <_printf_common>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	4616      	mov	r6, r2
 80075da:	4699      	mov	r9, r3
 80075dc:	688a      	ldr	r2, [r1, #8]
 80075de:	690b      	ldr	r3, [r1, #16]
 80075e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	bfb8      	it	lt
 80075e8:	4613      	movlt	r3, r2
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075f0:	4607      	mov	r7, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	b10a      	cbz	r2, 80075fa <_printf_common+0x26>
 80075f6:	3301      	adds	r3, #1
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	0699      	lsls	r1, r3, #26
 80075fe:	bf42      	ittt	mi
 8007600:	6833      	ldrmi	r3, [r6, #0]
 8007602:	3302      	addmi	r3, #2
 8007604:	6033      	strmi	r3, [r6, #0]
 8007606:	6825      	ldr	r5, [r4, #0]
 8007608:	f015 0506 	ands.w	r5, r5, #6
 800760c:	d106      	bne.n	800761c <_printf_common+0x48>
 800760e:	f104 0a19 	add.w	sl, r4, #25
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	6832      	ldr	r2, [r6, #0]
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	42ab      	cmp	r3, r5
 800761a:	dc26      	bgt.n	800766a <_printf_common+0x96>
 800761c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007620:	1e13      	subs	r3, r2, #0
 8007622:	6822      	ldr	r2, [r4, #0]
 8007624:	bf18      	it	ne
 8007626:	2301      	movne	r3, #1
 8007628:	0692      	lsls	r2, r2, #26
 800762a:	d42b      	bmi.n	8007684 <_printf_common+0xb0>
 800762c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007630:	4649      	mov	r1, r9
 8007632:	4638      	mov	r0, r7
 8007634:	47c0      	blx	r8
 8007636:	3001      	adds	r0, #1
 8007638:	d01e      	beq.n	8007678 <_printf_common+0xa4>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	68e5      	ldr	r5, [r4, #12]
 800763e:	6832      	ldr	r2, [r6, #0]
 8007640:	f003 0306 	and.w	r3, r3, #6
 8007644:	2b04      	cmp	r3, #4
 8007646:	bf08      	it	eq
 8007648:	1aad      	subeq	r5, r5, r2
 800764a:	68a3      	ldr	r3, [r4, #8]
 800764c:	6922      	ldr	r2, [r4, #16]
 800764e:	bf0c      	ite	eq
 8007650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007654:	2500      	movne	r5, #0
 8007656:	4293      	cmp	r3, r2
 8007658:	bfc4      	itt	gt
 800765a:	1a9b      	subgt	r3, r3, r2
 800765c:	18ed      	addgt	r5, r5, r3
 800765e:	2600      	movs	r6, #0
 8007660:	341a      	adds	r4, #26
 8007662:	42b5      	cmp	r5, r6
 8007664:	d11a      	bne.n	800769c <_printf_common+0xc8>
 8007666:	2000      	movs	r0, #0
 8007668:	e008      	b.n	800767c <_printf_common+0xa8>
 800766a:	2301      	movs	r3, #1
 800766c:	4652      	mov	r2, sl
 800766e:	4649      	mov	r1, r9
 8007670:	4638      	mov	r0, r7
 8007672:	47c0      	blx	r8
 8007674:	3001      	adds	r0, #1
 8007676:	d103      	bne.n	8007680 <_printf_common+0xac>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	3501      	adds	r5, #1
 8007682:	e7c6      	b.n	8007612 <_printf_common+0x3e>
 8007684:	18e1      	adds	r1, r4, r3
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	2030      	movs	r0, #48	; 0x30
 800768a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800768e:	4422      	add	r2, r4
 8007690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007698:	3302      	adds	r3, #2
 800769a:	e7c7      	b.n	800762c <_printf_common+0x58>
 800769c:	2301      	movs	r3, #1
 800769e:	4622      	mov	r2, r4
 80076a0:	4649      	mov	r1, r9
 80076a2:	4638      	mov	r0, r7
 80076a4:	47c0      	blx	r8
 80076a6:	3001      	adds	r0, #1
 80076a8:	d0e6      	beq.n	8007678 <_printf_common+0xa4>
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7d9      	b.n	8007662 <_printf_common+0x8e>
	...

080076b0 <_printf_i>:
 80076b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	460c      	mov	r4, r1
 80076b6:	4691      	mov	r9, r2
 80076b8:	7e27      	ldrb	r7, [r4, #24]
 80076ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076bc:	2f78      	cmp	r7, #120	; 0x78
 80076be:	4680      	mov	r8, r0
 80076c0:	469a      	mov	sl, r3
 80076c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c6:	d807      	bhi.n	80076d8 <_printf_i+0x28>
 80076c8:	2f62      	cmp	r7, #98	; 0x62
 80076ca:	d80a      	bhi.n	80076e2 <_printf_i+0x32>
 80076cc:	2f00      	cmp	r7, #0
 80076ce:	f000 80d8 	beq.w	8007882 <_printf_i+0x1d2>
 80076d2:	2f58      	cmp	r7, #88	; 0x58
 80076d4:	f000 80a3 	beq.w	800781e <_printf_i+0x16e>
 80076d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076e0:	e03a      	b.n	8007758 <_printf_i+0xa8>
 80076e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076e6:	2b15      	cmp	r3, #21
 80076e8:	d8f6      	bhi.n	80076d8 <_printf_i+0x28>
 80076ea:	a001      	add	r0, pc, #4	; (adr r0, 80076f0 <_printf_i+0x40>)
 80076ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80076f0:	08007749 	.word	0x08007749
 80076f4:	0800775d 	.word	0x0800775d
 80076f8:	080076d9 	.word	0x080076d9
 80076fc:	080076d9 	.word	0x080076d9
 8007700:	080076d9 	.word	0x080076d9
 8007704:	080076d9 	.word	0x080076d9
 8007708:	0800775d 	.word	0x0800775d
 800770c:	080076d9 	.word	0x080076d9
 8007710:	080076d9 	.word	0x080076d9
 8007714:	080076d9 	.word	0x080076d9
 8007718:	080076d9 	.word	0x080076d9
 800771c:	08007869 	.word	0x08007869
 8007720:	0800778d 	.word	0x0800778d
 8007724:	0800784b 	.word	0x0800784b
 8007728:	080076d9 	.word	0x080076d9
 800772c:	080076d9 	.word	0x080076d9
 8007730:	0800788b 	.word	0x0800788b
 8007734:	080076d9 	.word	0x080076d9
 8007738:	0800778d 	.word	0x0800778d
 800773c:	080076d9 	.word	0x080076d9
 8007740:	080076d9 	.word	0x080076d9
 8007744:	08007853 	.word	0x08007853
 8007748:	680b      	ldr	r3, [r1, #0]
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	600a      	str	r2, [r1, #0]
 8007750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007758:	2301      	movs	r3, #1
 800775a:	e0a3      	b.n	80078a4 <_printf_i+0x1f4>
 800775c:	6825      	ldr	r5, [r4, #0]
 800775e:	6808      	ldr	r0, [r1, #0]
 8007760:	062e      	lsls	r6, r5, #24
 8007762:	f100 0304 	add.w	r3, r0, #4
 8007766:	d50a      	bpl.n	800777e <_printf_i+0xce>
 8007768:	6805      	ldr	r5, [r0, #0]
 800776a:	600b      	str	r3, [r1, #0]
 800776c:	2d00      	cmp	r5, #0
 800776e:	da03      	bge.n	8007778 <_printf_i+0xc8>
 8007770:	232d      	movs	r3, #45	; 0x2d
 8007772:	426d      	negs	r5, r5
 8007774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007778:	485e      	ldr	r0, [pc, #376]	; (80078f4 <_printf_i+0x244>)
 800777a:	230a      	movs	r3, #10
 800777c:	e019      	b.n	80077b2 <_printf_i+0x102>
 800777e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007782:	6805      	ldr	r5, [r0, #0]
 8007784:	600b      	str	r3, [r1, #0]
 8007786:	bf18      	it	ne
 8007788:	b22d      	sxthne	r5, r5
 800778a:	e7ef      	b.n	800776c <_printf_i+0xbc>
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	1d18      	adds	r0, r3, #4
 8007792:	6008      	str	r0, [r1, #0]
 8007794:	0628      	lsls	r0, r5, #24
 8007796:	d501      	bpl.n	800779c <_printf_i+0xec>
 8007798:	681d      	ldr	r5, [r3, #0]
 800779a:	e002      	b.n	80077a2 <_printf_i+0xf2>
 800779c:	0669      	lsls	r1, r5, #25
 800779e:	d5fb      	bpl.n	8007798 <_printf_i+0xe8>
 80077a0:	881d      	ldrh	r5, [r3, #0]
 80077a2:	4854      	ldr	r0, [pc, #336]	; (80078f4 <_printf_i+0x244>)
 80077a4:	2f6f      	cmp	r7, #111	; 0x6f
 80077a6:	bf0c      	ite	eq
 80077a8:	2308      	moveq	r3, #8
 80077aa:	230a      	movne	r3, #10
 80077ac:	2100      	movs	r1, #0
 80077ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077b2:	6866      	ldr	r6, [r4, #4]
 80077b4:	60a6      	str	r6, [r4, #8]
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	bfa2      	ittt	ge
 80077ba:	6821      	ldrge	r1, [r4, #0]
 80077bc:	f021 0104 	bicge.w	r1, r1, #4
 80077c0:	6021      	strge	r1, [r4, #0]
 80077c2:	b90d      	cbnz	r5, 80077c8 <_printf_i+0x118>
 80077c4:	2e00      	cmp	r6, #0
 80077c6:	d04d      	beq.n	8007864 <_printf_i+0x1b4>
 80077c8:	4616      	mov	r6, r2
 80077ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80077ce:	fb03 5711 	mls	r7, r3, r1, r5
 80077d2:	5dc7      	ldrb	r7, [r0, r7]
 80077d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077d8:	462f      	mov	r7, r5
 80077da:	42bb      	cmp	r3, r7
 80077dc:	460d      	mov	r5, r1
 80077de:	d9f4      	bls.n	80077ca <_printf_i+0x11a>
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d10b      	bne.n	80077fc <_printf_i+0x14c>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	07df      	lsls	r7, r3, #31
 80077e8:	d508      	bpl.n	80077fc <_printf_i+0x14c>
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	6861      	ldr	r1, [r4, #4]
 80077ee:	4299      	cmp	r1, r3
 80077f0:	bfde      	ittt	le
 80077f2:	2330      	movle	r3, #48	; 0x30
 80077f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077fc:	1b92      	subs	r2, r2, r6
 80077fe:	6122      	str	r2, [r4, #16]
 8007800:	f8cd a000 	str.w	sl, [sp]
 8007804:	464b      	mov	r3, r9
 8007806:	aa03      	add	r2, sp, #12
 8007808:	4621      	mov	r1, r4
 800780a:	4640      	mov	r0, r8
 800780c:	f7ff fee2 	bl	80075d4 <_printf_common>
 8007810:	3001      	adds	r0, #1
 8007812:	d14c      	bne.n	80078ae <_printf_i+0x1fe>
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	b004      	add	sp, #16
 800781a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781e:	4835      	ldr	r0, [pc, #212]	; (80078f4 <_printf_i+0x244>)
 8007820:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	680e      	ldr	r6, [r1, #0]
 8007828:	061f      	lsls	r7, r3, #24
 800782a:	f856 5b04 	ldr.w	r5, [r6], #4
 800782e:	600e      	str	r6, [r1, #0]
 8007830:	d514      	bpl.n	800785c <_printf_i+0x1ac>
 8007832:	07d9      	lsls	r1, r3, #31
 8007834:	bf44      	itt	mi
 8007836:	f043 0320 	orrmi.w	r3, r3, #32
 800783a:	6023      	strmi	r3, [r4, #0]
 800783c:	b91d      	cbnz	r5, 8007846 <_printf_i+0x196>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f023 0320 	bic.w	r3, r3, #32
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	2310      	movs	r3, #16
 8007848:	e7b0      	b.n	80077ac <_printf_i+0xfc>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	f043 0320 	orr.w	r3, r3, #32
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	2378      	movs	r3, #120	; 0x78
 8007854:	4828      	ldr	r0, [pc, #160]	; (80078f8 <_printf_i+0x248>)
 8007856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800785a:	e7e3      	b.n	8007824 <_printf_i+0x174>
 800785c:	065e      	lsls	r6, r3, #25
 800785e:	bf48      	it	mi
 8007860:	b2ad      	uxthmi	r5, r5
 8007862:	e7e6      	b.n	8007832 <_printf_i+0x182>
 8007864:	4616      	mov	r6, r2
 8007866:	e7bb      	b.n	80077e0 <_printf_i+0x130>
 8007868:	680b      	ldr	r3, [r1, #0]
 800786a:	6826      	ldr	r6, [r4, #0]
 800786c:	6960      	ldr	r0, [r4, #20]
 800786e:	1d1d      	adds	r5, r3, #4
 8007870:	600d      	str	r5, [r1, #0]
 8007872:	0635      	lsls	r5, r6, #24
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	d501      	bpl.n	800787c <_printf_i+0x1cc>
 8007878:	6018      	str	r0, [r3, #0]
 800787a:	e002      	b.n	8007882 <_printf_i+0x1d2>
 800787c:	0671      	lsls	r1, r6, #25
 800787e:	d5fb      	bpl.n	8007878 <_printf_i+0x1c8>
 8007880:	8018      	strh	r0, [r3, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	4616      	mov	r6, r2
 8007888:	e7ba      	b.n	8007800 <_printf_i+0x150>
 800788a:	680b      	ldr	r3, [r1, #0]
 800788c:	1d1a      	adds	r2, r3, #4
 800788e:	600a      	str	r2, [r1, #0]
 8007890:	681e      	ldr	r6, [r3, #0]
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	2100      	movs	r1, #0
 8007896:	4630      	mov	r0, r6
 8007898:	f7f8 fca2 	bl	80001e0 <memchr>
 800789c:	b108      	cbz	r0, 80078a2 <_printf_i+0x1f2>
 800789e:	1b80      	subs	r0, r0, r6
 80078a0:	6060      	str	r0, [r4, #4]
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	2300      	movs	r3, #0
 80078a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ac:	e7a8      	b.n	8007800 <_printf_i+0x150>
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	4632      	mov	r2, r6
 80078b2:	4649      	mov	r1, r9
 80078b4:	4640      	mov	r0, r8
 80078b6:	47d0      	blx	sl
 80078b8:	3001      	adds	r0, #1
 80078ba:	d0ab      	beq.n	8007814 <_printf_i+0x164>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	079b      	lsls	r3, r3, #30
 80078c0:	d413      	bmi.n	80078ea <_printf_i+0x23a>
 80078c2:	68e0      	ldr	r0, [r4, #12]
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	4298      	cmp	r0, r3
 80078c8:	bfb8      	it	lt
 80078ca:	4618      	movlt	r0, r3
 80078cc:	e7a4      	b.n	8007818 <_printf_i+0x168>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4632      	mov	r2, r6
 80078d2:	4649      	mov	r1, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	47d0      	blx	sl
 80078d8:	3001      	adds	r0, #1
 80078da:	d09b      	beq.n	8007814 <_printf_i+0x164>
 80078dc:	3501      	adds	r5, #1
 80078de:	68e3      	ldr	r3, [r4, #12]
 80078e0:	9903      	ldr	r1, [sp, #12]
 80078e2:	1a5b      	subs	r3, r3, r1
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dcf2      	bgt.n	80078ce <_printf_i+0x21e>
 80078e8:	e7eb      	b.n	80078c2 <_printf_i+0x212>
 80078ea:	2500      	movs	r5, #0
 80078ec:	f104 0619 	add.w	r6, r4, #25
 80078f0:	e7f5      	b.n	80078de <_printf_i+0x22e>
 80078f2:	bf00      	nop
 80078f4:	0800ac11 	.word	0x0800ac11
 80078f8:	0800ac22 	.word	0x0800ac22

080078fc <memcpy>:
 80078fc:	440a      	add	r2, r1
 80078fe:	4291      	cmp	r1, r2
 8007900:	f100 33ff 	add.w	r3, r0, #4294967295
 8007904:	d100      	bne.n	8007908 <memcpy+0xc>
 8007906:	4770      	bx	lr
 8007908:	b510      	push	{r4, lr}
 800790a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800790e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007912:	4291      	cmp	r1, r2
 8007914:	d1f9      	bne.n	800790a <memcpy+0xe>
 8007916:	bd10      	pop	{r4, pc}

08007918 <memmove>:
 8007918:	4288      	cmp	r0, r1
 800791a:	b510      	push	{r4, lr}
 800791c:	eb01 0402 	add.w	r4, r1, r2
 8007920:	d902      	bls.n	8007928 <memmove+0x10>
 8007922:	4284      	cmp	r4, r0
 8007924:	4623      	mov	r3, r4
 8007926:	d807      	bhi.n	8007938 <memmove+0x20>
 8007928:	1e43      	subs	r3, r0, #1
 800792a:	42a1      	cmp	r1, r4
 800792c:	d008      	beq.n	8007940 <memmove+0x28>
 800792e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007932:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007936:	e7f8      	b.n	800792a <memmove+0x12>
 8007938:	4402      	add	r2, r0
 800793a:	4601      	mov	r1, r0
 800793c:	428a      	cmp	r2, r1
 800793e:	d100      	bne.n	8007942 <memmove+0x2a>
 8007940:	bd10      	pop	{r4, pc}
 8007942:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007946:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800794a:	e7f7      	b.n	800793c <memmove+0x24>

0800794c <_free_r>:
 800794c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800794e:	2900      	cmp	r1, #0
 8007950:	d048      	beq.n	80079e4 <_free_r+0x98>
 8007952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007956:	9001      	str	r0, [sp, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f1a1 0404 	sub.w	r4, r1, #4
 800795e:	bfb8      	it	lt
 8007960:	18e4      	addlt	r4, r4, r3
 8007962:	f000 f8d3 	bl	8007b0c <__malloc_lock>
 8007966:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <_free_r+0x9c>)
 8007968:	9801      	ldr	r0, [sp, #4]
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	4615      	mov	r5, r2
 800796e:	b933      	cbnz	r3, 800797e <_free_r+0x32>
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	6014      	str	r4, [r2, #0]
 8007974:	b003      	add	sp, #12
 8007976:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800797a:	f000 b8cd 	b.w	8007b18 <__malloc_unlock>
 800797e:	42a3      	cmp	r3, r4
 8007980:	d90b      	bls.n	800799a <_free_r+0x4e>
 8007982:	6821      	ldr	r1, [r4, #0]
 8007984:	1862      	adds	r2, r4, r1
 8007986:	4293      	cmp	r3, r2
 8007988:	bf04      	itt	eq
 800798a:	681a      	ldreq	r2, [r3, #0]
 800798c:	685b      	ldreq	r3, [r3, #4]
 800798e:	6063      	str	r3, [r4, #4]
 8007990:	bf04      	itt	eq
 8007992:	1852      	addeq	r2, r2, r1
 8007994:	6022      	streq	r2, [r4, #0]
 8007996:	602c      	str	r4, [r5, #0]
 8007998:	e7ec      	b.n	8007974 <_free_r+0x28>
 800799a:	461a      	mov	r2, r3
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	b10b      	cbz	r3, 80079a4 <_free_r+0x58>
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	d9fa      	bls.n	800799a <_free_r+0x4e>
 80079a4:	6811      	ldr	r1, [r2, #0]
 80079a6:	1855      	adds	r5, r2, r1
 80079a8:	42a5      	cmp	r5, r4
 80079aa:	d10b      	bne.n	80079c4 <_free_r+0x78>
 80079ac:	6824      	ldr	r4, [r4, #0]
 80079ae:	4421      	add	r1, r4
 80079b0:	1854      	adds	r4, r2, r1
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	6011      	str	r1, [r2, #0]
 80079b6:	d1dd      	bne.n	8007974 <_free_r+0x28>
 80079b8:	681c      	ldr	r4, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	6053      	str	r3, [r2, #4]
 80079be:	4421      	add	r1, r4
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	e7d7      	b.n	8007974 <_free_r+0x28>
 80079c4:	d902      	bls.n	80079cc <_free_r+0x80>
 80079c6:	230c      	movs	r3, #12
 80079c8:	6003      	str	r3, [r0, #0]
 80079ca:	e7d3      	b.n	8007974 <_free_r+0x28>
 80079cc:	6825      	ldr	r5, [r4, #0]
 80079ce:	1961      	adds	r1, r4, r5
 80079d0:	428b      	cmp	r3, r1
 80079d2:	bf04      	itt	eq
 80079d4:	6819      	ldreq	r1, [r3, #0]
 80079d6:	685b      	ldreq	r3, [r3, #4]
 80079d8:	6063      	str	r3, [r4, #4]
 80079da:	bf04      	itt	eq
 80079dc:	1949      	addeq	r1, r1, r5
 80079de:	6021      	streq	r1, [r4, #0]
 80079e0:	6054      	str	r4, [r2, #4]
 80079e2:	e7c7      	b.n	8007974 <_free_r+0x28>
 80079e4:	b003      	add	sp, #12
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	200004a4 	.word	0x200004a4

080079ec <_malloc_r>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	1ccd      	adds	r5, r1, #3
 80079f0:	f025 0503 	bic.w	r5, r5, #3
 80079f4:	3508      	adds	r5, #8
 80079f6:	2d0c      	cmp	r5, #12
 80079f8:	bf38      	it	cc
 80079fa:	250c      	movcc	r5, #12
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	4606      	mov	r6, r0
 8007a00:	db01      	blt.n	8007a06 <_malloc_r+0x1a>
 8007a02:	42a9      	cmp	r1, r5
 8007a04:	d903      	bls.n	8007a0e <_malloc_r+0x22>
 8007a06:	230c      	movs	r3, #12
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a0e:	f000 f87d 	bl	8007b0c <__malloc_lock>
 8007a12:	4921      	ldr	r1, [pc, #132]	; (8007a98 <_malloc_r+0xac>)
 8007a14:	680a      	ldr	r2, [r1, #0]
 8007a16:	4614      	mov	r4, r2
 8007a18:	b99c      	cbnz	r4, 8007a42 <_malloc_r+0x56>
 8007a1a:	4f20      	ldr	r7, [pc, #128]	; (8007a9c <_malloc_r+0xb0>)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	b923      	cbnz	r3, 8007a2a <_malloc_r+0x3e>
 8007a20:	4621      	mov	r1, r4
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 f862 	bl	8007aec <_sbrk_r>
 8007a28:	6038      	str	r0, [r7, #0]
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 f85d 	bl	8007aec <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d123      	bne.n	8007a7e <_malloc_r+0x92>
 8007a36:	230c      	movs	r3, #12
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f000 f86c 	bl	8007b18 <__malloc_unlock>
 8007a40:	e7e3      	b.n	8007a0a <_malloc_r+0x1e>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	1b5b      	subs	r3, r3, r5
 8007a46:	d417      	bmi.n	8007a78 <_malloc_r+0x8c>
 8007a48:	2b0b      	cmp	r3, #11
 8007a4a:	d903      	bls.n	8007a54 <_malloc_r+0x68>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	441c      	add	r4, r3
 8007a50:	6025      	str	r5, [r4, #0]
 8007a52:	e004      	b.n	8007a5e <_malloc_r+0x72>
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	42a2      	cmp	r2, r4
 8007a58:	bf0c      	ite	eq
 8007a5a:	600b      	streq	r3, [r1, #0]
 8007a5c:	6053      	strne	r3, [r2, #4]
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f000 f85a 	bl	8007b18 <__malloc_unlock>
 8007a64:	f104 000b 	add.w	r0, r4, #11
 8007a68:	1d23      	adds	r3, r4, #4
 8007a6a:	f020 0007 	bic.w	r0, r0, #7
 8007a6e:	1ac2      	subs	r2, r0, r3
 8007a70:	d0cc      	beq.n	8007a0c <_malloc_r+0x20>
 8007a72:	1a1b      	subs	r3, r3, r0
 8007a74:	50a3      	str	r3, [r4, r2]
 8007a76:	e7c9      	b.n	8007a0c <_malloc_r+0x20>
 8007a78:	4622      	mov	r2, r4
 8007a7a:	6864      	ldr	r4, [r4, #4]
 8007a7c:	e7cc      	b.n	8007a18 <_malloc_r+0x2c>
 8007a7e:	1cc4      	adds	r4, r0, #3
 8007a80:	f024 0403 	bic.w	r4, r4, #3
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d0e3      	beq.n	8007a50 <_malloc_r+0x64>
 8007a88:	1a21      	subs	r1, r4, r0
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 f82e 	bl	8007aec <_sbrk_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	d1dd      	bne.n	8007a50 <_malloc_r+0x64>
 8007a94:	e7cf      	b.n	8007a36 <_malloc_r+0x4a>
 8007a96:	bf00      	nop
 8007a98:	200004a4 	.word	0x200004a4
 8007a9c:	200004a8 	.word	0x200004a8

08007aa0 <_realloc_r>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	b921      	cbnz	r1, 8007ab4 <_realloc_r+0x14>
 8007aaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007aae:	4611      	mov	r1, r2
 8007ab0:	f7ff bf9c 	b.w	80079ec <_malloc_r>
 8007ab4:	b922      	cbnz	r2, 8007ac0 <_realloc_r+0x20>
 8007ab6:	f7ff ff49 	bl	800794c <_free_r>
 8007aba:	4625      	mov	r5, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac0:	f000 f830 	bl	8007b24 <_malloc_usable_size_r>
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d20f      	bcs.n	8007ae8 <_realloc_r+0x48>
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7ff ff8e 	bl	80079ec <_malloc_r>
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d0f2      	beq.n	8007abc <_realloc_r+0x1c>
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4622      	mov	r2, r4
 8007ada:	f7ff ff0f 	bl	80078fc <memcpy>
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ff33 	bl	800794c <_free_r>
 8007ae6:	e7e9      	b.n	8007abc <_realloc_r+0x1c>
 8007ae8:	4635      	mov	r5, r6
 8007aea:	e7e7      	b.n	8007abc <_realloc_r+0x1c>

08007aec <_sbrk_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d06      	ldr	r5, [pc, #24]	; (8007b08 <_sbrk_r+0x1c>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fa fe90 	bl	800281c <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_sbrk_r+0x1a>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_sbrk_r+0x1a>
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	200007ac 	.word	0x200007ac

08007b0c <__malloc_lock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <__malloc_lock+0x8>)
 8007b0e:	f000 b811 	b.w	8007b34 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	200007b4 	.word	0x200007b4

08007b18 <__malloc_unlock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <__malloc_unlock+0x8>)
 8007b1a:	f000 b80c 	b.w	8007b36 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	200007b4 	.word	0x200007b4

08007b24 <_malloc_usable_size_r>:
 8007b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b28:	1f18      	subs	r0, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfbc      	itt	lt
 8007b2e:	580b      	ldrlt	r3, [r1, r0]
 8007b30:	18c0      	addlt	r0, r0, r3
 8007b32:	4770      	bx	lr

08007b34 <__retarget_lock_acquire_recursive>:
 8007b34:	4770      	bx	lr

08007b36 <__retarget_lock_release_recursive>:
 8007b36:	4770      	bx	lr

08007b38 <_init>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr

08007b44 <_fini>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr
